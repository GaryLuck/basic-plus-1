// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:3

package main

import __yyfmt__ "fmt"

//line parser.y:4

import (
	"math"
)

var parsingUneg bool

type yyPos struct {
	line   int
	column int
}

type yySymLoc struct {
	pos yyPos
	end yyPos
}

//line parser.y:12
type yySymType struct {
	yys        int
	symLoc     yySymLoc
	stringVal  string
	intVal     int
	int64Val   int64
	float64Val float64
	snodeVal   *stmtNode
	tnodeVal   *tokenNode
}

const ABS = 57346
const AS = 57347
const ASCII = 57348
const AND = 57349
const ATN = 57350
const BYE = 57351
const CHANGE = 57352
const CHRS = 57353
const CLOSE = 57354
const CLUSTERSIZE = 57355
const CONFIG = 57356
const CONT = 57357
const COS = 57358
const COUNT = 57359
const CVTFS = 57360
const CVTIS = 57361
const CVTSF = 57362
const CVTSI = 57363
const DATA = 57364
const DATES = 57365
const DEF = 57366
const DELETE = 57367
const DENORM = 57368
const DIM = 57369
const ELSE = 57370
const END = 57371
const EOL = 57372
const EQV = 57373
const ERL = 57374
const ERR = 57375
const ERROR = 57376
const EXEC = 57377
const EXP = 57378
const FIELD = 57379
const FILE = 57380
const FILENAME = 57381
const FIX = 57382
const FLOAT = 57383
const FOR = 57384
const FNEND = 57385
const FNFVAR = 57386
const FNIVAR = 57387
const FNSVAR = 57388
const FVAR = 57389
const GET = 57390
const GOSUB = 57391
const GOTO = 57392
const HELP = 57393
const IF = 57394
const IMP = 57395
const INPUT = 57396
const INSTR = 57397
const INT = 57398
const KILL = 57399
const LEN = 57400
const LEFT = 57401
const LET = 57402
const LINE = 57403
const LIST = 57404
const LISTNH = 57405
const LOG = 57406
const LOG10 = 57407
const LSET = 57408
const MID = 57409
const MODE = 57410
const NEXT = 57411
const NEW = 57412
const NODES = 57413
const NOT = 57414
const NUMS = 57415
const OLD = 57416
const ON = 57417
const OR = 57418
const OPEN = 57419
const OUTPUT = 57420
const PI = 57421
const POS = 57422
const POUND = 57423
const PRINT = 57424
const PUT = 57425
const READ = 57426
const RECORD = 57427
const RECORDSIZE = 57428
const RELOAD = 57429
const REM = 57430
const RANDOMIZE = 57431
const RENUMBER = 57432
const RESTORE = 57433
const RESUME = 57434
const RETURN = 57435
const RIGHT = 57436
const RND = 57437
const RSET = 57438
const RUN = 57439
const RUNNH = 57440
const SAVE = 57441
const SGN = 57442
const SIN = 57443
const SLASH = 57444
const SLEEP = 57445
const SPACES = 57446
const SQR = 57447
const STATS = 57448
const STEP = 57449
const STOP = 57450
const SWAPI = 57451
const TAB = 57452
const TAN = 57453
const THEN = 57454
const TIME = 57455
const TIMES = 57456
const TO = 57457
const TRACE = 57458
const UNTIL = 57459
const USING = 57460
const VAL = 57461
const VARS = 57462
const WHILE = 57463
const WAIT = 57464
const XOR = 57465
const APPROX = 57466
const BADFILENAME = 57467
const BADFUNCNAME = 57468
const BADVARIABLE = 57469
const CHAR = 57470
const COLON = 57471
const COMMA = 57472
const COMMENT = 57473
const CONCAT = 57474
const DCOMMA = 57475
const DOLLAR = 57476
const EINTEGER = 57477
const EQ = 57478
const FIELDELEMENT = 57479
const FILLCHAR = 57480
const GT = 57481
const GE = 57482
const INTEGER = 57483
const INPUTPAIR = 57484
const INTPAIR = 57485
const IVAR = 57486
const LE = 57487
const LONGLINE = 57488
const LPAR = 57489
const LT = 57490
const MINUS = 57491
const NCALL = 57492
const NE = 57493
const NRPN = 57494
const ONERROR = 57495
const ONGOSUB = 57496
const ONGOTO = 57497
const PLUS = 57498
const POW = 57499
const RPAR = 57500
const SCALL = 57501
const SEMI = 57502
const SRPN = 57503
const STAR = 57504
const STMT = 57505
const STRGE = 57506
const STRGT = 57507
const STREQ = 57508
const STRING = 57509
const STRLE = 57510
const STRLT = 57511
const STRNE = 57512
const SUBSCR = 57513
const SUBSCR1 = 57514
const SUBSCR2 = 57515
const SVAR = 57516
const TRAILING_COMMA = 57517
const TRAILING_SEMI = 57518
const UNEG = 57519
const UPLUS = 57520
const USTRING = 57521

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ABS",
	"AS",
	"ASCII",
	"AND",
	"ATN",
	"BYE",
	"CHANGE",
	"CHRS",
	"CLOSE",
	"CLUSTERSIZE",
	"CONFIG",
	"CONT",
	"COS",
	"COUNT",
	"CVTFS",
	"CVTIS",
	"CVTSF",
	"CVTSI",
	"DATA",
	"DATES",
	"DEF",
	"DELETE",
	"DENORM",
	"DIM",
	"ELSE",
	"END",
	"EOL",
	"EQV",
	"ERL",
	"ERR",
	"ERROR",
	"EXEC",
	"EXP",
	"FIELD",
	"FILE",
	"FILENAME",
	"FIX",
	"FLOAT",
	"FOR",
	"FNEND",
	"FNFVAR",
	"FNIVAR",
	"FNSVAR",
	"FVAR",
	"GET",
	"GOSUB",
	"GOTO",
	"HELP",
	"IF",
	"IMP",
	"INPUT",
	"INSTR",
	"INT",
	"KILL",
	"LEN",
	"LEFT",
	"LET",
	"LINE",
	"LIST",
	"LISTNH",
	"LOG",
	"LOG10",
	"LSET",
	"MID",
	"MODE",
	"NEXT",
	"NEW",
	"NODES",
	"NOT",
	"NUMS",
	"OLD",
	"ON",
	"OR",
	"OPEN",
	"OUTPUT",
	"PI",
	"POS",
	"POUND",
	"PRINT",
	"PUT",
	"READ",
	"RECORD",
	"RECORDSIZE",
	"RELOAD",
	"REM",
	"RANDOMIZE",
	"RENUMBER",
	"RESTORE",
	"RESUME",
	"RETURN",
	"RIGHT",
	"RND",
	"RSET",
	"RUN",
	"RUNNH",
	"SAVE",
	"SGN",
	"SIN",
	"SLASH",
	"SLEEP",
	"SPACES",
	"SQR",
	"STATS",
	"STEP",
	"STOP",
	"SWAPI",
	"TAB",
	"TAN",
	"THEN",
	"TIME",
	"TIMES",
	"TO",
	"TRACE",
	"UNTIL",
	"USING",
	"VAL",
	"VARS",
	"WHILE",
	"WAIT",
	"XOR",
	"APPROX",
	"BADFILENAME",
	"BADFUNCNAME",
	"BADVARIABLE",
	"CHAR",
	"COLON",
	"COMMA",
	"COMMENT",
	"CONCAT",
	"DCOMMA",
	"DOLLAR",
	"EINTEGER",
	"EQ",
	"FIELDELEMENT",
	"FILLCHAR",
	"GT",
	"GE",
	"INTEGER",
	"INPUTPAIR",
	"INTPAIR",
	"IVAR",
	"LE",
	"LONGLINE",
	"LPAR",
	"LT",
	"MINUS",
	"NCALL",
	"NE",
	"NRPN",
	"ONERROR",
	"ONGOSUB",
	"ONGOTO",
	"PLUS",
	"POW",
	"RPAR",
	"SCALL",
	"SEMI",
	"SRPN",
	"STAR",
	"STMT",
	"STRGE",
	"STRGT",
	"STREQ",
	"STRING",
	"STRLE",
	"STRLT",
	"STRNE",
	"SUBSCR",
	"SUBSCR1",
	"SUBSCR2",
	"SVAR",
	"TRAILING_COMMA",
	"TRAILING_SEMI",
	"UNEG",
	"UPLUS",
	"USTRING",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:2710

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 2398

var yyAct = [...]int{
	136, 342, 71, 457, 461, 231, 222, 428, 226, 413,
	365, 380, 210, 91, 198, 213, 218, 325, 193, 82,
	289, 326, 113, 508, 59, 110, 40, 103, 188, 67,
	343, 344, 196, 67, 39, 268, 31, 12, 189, 456,
	138, 507, 109, 4, 454, 372, 196, 107, 470, 83,
	451, 327, 416, 269, 235, 256, 101, 137, 141, 66,
	224, 199, 211, 66, 139, 215, 97, 455, 117, 118,
	140, 68, 453, 100, 348, 68, 290, 347, 83, 199,
	99, 200, 201, 135, 83, 197, 149, 106, 195, 212,
	269, 363, 190, 207, 238, 267, 310, 307, 220, 303,
	301, 283, 195, 78, 349, 259, 258, 254, 268, 217,
	83, 244, 191, 225, 96, 228, 229, 230, 67, 236,
	83, 105, 77, 96, 237, 539, 96, 104, 83, 79,
	538, 533, 532, 95, 531, 7, 239, 373, 214, 354,
	96, 353, 95, 352, 285, 95, 84, 337, 66, 330,
	287, 261, 242, 93, 324, 266, 241, 240, 79, 95,
	68, 96, 265, 269, 79, 94, 69, 89, 267, 260,
	351, 262, 535, 534, 520, 84, 82, 92, 296, 297,
	95, 84, 350, 221, 518, 187, 112, 322, 304, 115,
	79, 488, 483, 224, 478, 477, 90, 323, 93, 452,
	79, 102, 441, 205, 93, 82, 321, 84, 79, 433,
	94, 82, 328, 379, 375, 194, 94, 84, 339, 336,
	331, 329, 224, 257, 223, 84, 255, 252, 203, 462,
	73, 74, 75, 251, 464, 250, 338, 82, 463, 464,
	249, 536, 479, 463, 465, 358, 5, 82, 209, 116,
	114, 86, 334, 264, 361, 332, 333, 224, 341, 480,
	113, 367, 376, 247, 335, 526, 395, 396, 397, 398,
	399, 400, 401, 402, 403, 404, 405, 406, 407, 408,
	409, 410, 411, 371, 414, 415, 202, 345, 392, 88,
	386, 417, 67, 101, 96, 355, 356, 357, 385, 370,
	384, 381, 418, 369, 419, 374, 393, 394, 420, 439,
	100, 421, 76, 95, 204, 263, 377, 99, 87, 362,
	528, 243, 66, 96, 206, 368, 466, 525, 196, 537,
	489, 196, 196, 440, 68, 437, 248, 286, 527, 196,
	216, 430, 95, 147, 146, 145, 427, 424, 436, 434,
	431, 284, 442, 96, 96, 211, 443, 223, 96, 346,
	199, 96, 234, 98, 423, 192, 111, 108, 425, 227,
	64, 366, 95, 95, 282, 429, 429, 95, 219, 422,
	95, 438, 519, 340, 195, 426, 223, 195, 195, 517,
	458, 432, 435, 30, 228, 195, 119, 268, 378, 245,
	246, 253, 81, 80, 70, 72, 444, 445, 446, 447,
	148, 8, 1, 0, 0, 0, 359, 360, 450, 270,
	0, 223, 0, 0, 112, 467, 468, 0, 0, 0,
	459, 271, 469, 0, 273, 272, 0, 0, 102, 0,
	274, 0, 0, 275, 266, 482, 276, 481, 0, 0,
	484, 265, 269, 0, 0, 224, 0, 267, 0, 367,
	0, 490, 0, 485, 492, 493, 0, 0, 73, 74,
	75, 83, 414, 0, 497, 498, 499, 500, 495, 0,
	224, 496, 0, 0, 501, 0, 502, 0, 0, 505,
	0, 392, 509, 386, 0, 67, 512, 0, 0, 0,
	486, 385, 487, 384, 381, 0, 0, 521, 0, 393,
	0, 194, 522, 0, 523, 194, 524, 491, 510, 0,
	494, 429, 0, 368, 0, 66, 0, 0, 0, 0,
	0, 0, 0, 0, 503, 504, 0, 68, 0, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 0, 0,
	76, 79, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 6, 0, 84, 0,
	0, 0, 0, 9, 10, 95, 60, 0, 14, 13,
	0, 96, 364, 0, 0, 0, 15, 0, 16, 17,
	18, 19, 0, 20, 2, 0, 0, 0, 82, 0,
	95, 21, 0, 0, 0, 0, 22, 23, 73, 74,
	75, 83, 24, 25, 26, 27, 28, 0, 29, 223,
	0, 61, 0, 0, 65, 0, 33, 34, 0, 0,
	32, 0, 0, 36, 35, 0, 0, 0, 37, 38,
	0, 62, 0, 0, 223, 0, 63, 41, 43, 0,
	0, 45, 44, 42, 46, 47, 48, 49, 0, 0,
	50, 51, 52, 53, 0, 0, 0, 54, 0, 0,
	55, 0, 56, 73, 74, 75, 83, 0, 0, 0,
	57, 0, 0, 0, 0, 150, 58, 151, 0, 152,
	76, 79, 153, 0, 0, 11, 0, 154, 0, 155,
	156, 157, 158, 0, 159, 7, 0, 0, 84, 0,
	3, 0, 0, 160, 161, 0, 0, 162, 0, 0,
	0, 163, 103, 0, 0, 73, 74, 75, 83, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 82, 167,
	166, 0, 0, 0, 0, 168, 169, 0, 170, 0,
	0, 0, 0, 186, 171, 76, 79, 0, 0, 0,
	172, 173, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 174, 175, 0, 0, 0,
	0, 176, 177, 0, 0, 178, 179, 0, 0, 0,
	180, 181, 182, 0, 183, 184, 0, 0, 0, 232,
	185, 0, 0, 82, 0, 0, 0, 76, 79, 0,
	0, 0, 277, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 104, 0, 0, 84, 0, 0, 149, 0,
	142, 0, 0, 0, 0, 0, 279, 143, 0, 0,
	0, 0, 150, 0, 151, 0, 152, 0, 93, 153,
	0, 0, 0, 0, 154, 82, 155, 156, 157, 158,
	94, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	160, 161, 0, 0, 162, 0, 0, 0, 163, 103,
	0, 280, 73, 74, 75, 83, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 0, 167, 166, 0, 0,
	0, 0, 168, 169, 0, 170, 0, 268, 0, 0,
	186, 171, 0, 0, 0, 0, 0, 172, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 270,
	0, 0, 174, 175, 0, 0, 0, 0, 176, 177,
	0, 271, 178, 179, 273, 272, 0, 180, 181, 182,
	274, 183, 184, 275, 266, 0, 276, 185, 0, 0,
	0, 265, 269, 0, 76, 79, 0, 267, 0, 277,
	0, 0, 0, 105, 0, 0, 0, 0, 0, 104,
	0, 0, 84, 0, 0, 149, 0, 142, 0, 0,
	0, 0, 0, 0, 143, 0, 412, 0, 0, 150,
	0, 151, 0, 152, 0, 93, 153, 0, 0, 0,
	0, 154, 82, 155, 156, 157, 158, 94, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 160, 161, 208,
	0, 162, 0, 0, 0, 163, 103, 0, 280, 73,
	74, 75, 83, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 0, 167, 166, 0, 0, 0, 0, 168,
	169, 0, 170, 0, 268, 0, 0, 186, 171, 0,
	0, 0, 0, 0, 172, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 270, 0, 0, 174,
	175, 0, 0, 0, 0, 176, 177, 0, 271, 178,
	179, 273, 272, 0, 180, 181, 182, 274, 183, 184,
	275, 266, 0, 276, 185, 0, 0, 0, 265, 269,
	0, 76, 79, 0, 267, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 104, 0, 0, 84,
	0, 0, 149, 0, 142, 0, 0, 0, 0, 0,
	0, 143, 0, 0, 0, 9, 10, 0, 60, 0,
	14, 13, 93, 0, 0, 0, 0, 0, 15, 82,
	16, 17, 18, 19, 94, 20, 85, 0, 0, 0,
	0, 0, 0, 21, 0, 0, 0, 0, 22, 23,
	73, 74, 75, 83, 24, 25, 26, 27, 28, 0,
	29, 0, 0, 61, 0, 0, 65, 0, 33, 34,
	0, 0, 32, 0, 0, 36, 35, 0, 0, 0,
	37, 38, 0, 62, 0, 0, 0, 0, 63, 41,
	43, 0, 0, 45, 44, 42, 46, 47, 48, 49,
	0, 0, 50, 51, 52, 53, 0, 0, 0, 54,
	0, 0, 55, 0, 56, 0, 0, 0, 0, 0,
	0, 0, 57, 0, 0, 0, 0, 150, 58, 151,
	0, 152, 76, 79, 153, 0, 0, 11, 0, 154,
	0, 155, 156, 157, 158, 0, 159, 0, 0, 0,
	84, 0, 0, 0, 0, 160, 161, 0, 0, 162,
	0, 0, 0, 163, 103, 0, 0, 73, 74, 75,
	83, 0, 0, 0, 0, 0, 0, 0, 164, 165,
	82, 167, 166, 0, 0, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 0, 186, 171, 0, 0, 0,
	0, 0, 172, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 175, 0,
	0, 0, 0, 176, 177, 0, 0, 178, 179, 0,
	0, 0, 180, 181, 182, 0, 183, 184, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 0, 0, 76,
	79, 0, 0, 144, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 104, 0, 0, 84, 0, 0,
	149, 0, 142, 0, 0, 0, 0, 0, 0, 143,
	0, 0, 0, 9, 10, 0, 60, 0, 14, 13,
	93, 0, 0, 0, 0, 0, 15, 82, 16, 17,
	18, 19, 94, 20, 0, 0, 0, 0, 0, 0,
	0, 21, 0, 0, 0, 0, 22, 23, 73, 74,
	75, 83, 24, 25, 26, 27, 28, 0, 29, 0,
	0, 61, 0, 0, 65, 0, 33, 34, 0, 0,
	32, 0, 0, 36, 35, 0, 277, 0, 37, 38,
	0, 62, 0, 0, 0, 0, 63, 41, 43, 0,
	0, 45, 44, 42, 46, 47, 48, 49, 0, 0,
	50, 51, 52, 53, 0, 0, 0, 54, 0, 0,
	55, 0, 56, 0, 0, 0, 0, 0, 0, 0,
	57, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	76, 79, 0, 0, 288, 11, 291, 292, 293, 294,
	295, 0, 60, 298, 0, 0, 299, 300, 84, 302,
	0, 0, 305, 306, 0, 308, 0, 309, 0, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 0,
	277, 268, 0, 0, 73, 74, 75, 83, 82, 382,
	383, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	65, 0, 0, 270, 279, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 271, 0, 62, 273, 272,
	0, 0, 63, 0, 274, 0, 278, 275, 266, 387,
	276, 388, 389, 390, 279, 265, 269, 0, 0, 277,
	0, 267, 0, 0, 0, 0, 0, 0, 391, 280,
	0, 0, 0, 0, 0, 0, 278, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 76, 79, 0, 277,
	0, 0, 0, 0, 0, 268, 0, 0, 0, 280,
	0, 7, 0, 0, 84, 278, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 281, 270, 0, 0,
	0, 0, 0, 449, 0, 268, 0, 0, 280, 271,
	0, 0, 273, 272, 82, 278, 0, 0, 274, 0,
	0, 275, 266, 0, 276, 0, 281, 270, 0, 265,
	269, 448, 0, 0, 268, 267, 0, 0, 280, 271,
	0, 0, 273, 272, 0, 277, 0, 0, 274, 0,
	0, 275, 266, 0, 276, 281, 270, 0, 0, 265,
	269, 530, 0, 0, 268, 267, 0, 0, 271, 279,
	0, 273, 272, 0, 0, 277, 0, 274, 0, 0,
	275, 266, 0, 276, 0, 281, 270, 0, 265, 269,
	529, 278, 0, 0, 267, 0, 0, 0, 271, 279,
	0, 273, 272, 0, 277, 0, 0, 274, 0, 0,
	275, 266, 0, 276, 280, 0, 0, 0, 265, 269,
	516, 278, 0, 0, 267, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	278, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 281, 270, 0, 0, 0, 0, 0, 515, 277,
	268, 0, 0, 280, 271, 0, 0, 273, 272, 0,
	278, 0, 0, 274, 0, 0, 275, 266, 0, 276,
	0, 281, 270, 279, 265, 269, 0, 0, 0, 268,
	267, 0, 0, 280, 271, 0, 0, 273, 272, 0,
	0, 277, 0, 274, 0, 278, 275, 266, 0, 276,
	281, 270, 0, 0, 265, 269, 514, 513, 0, 268,
	267, 0, 0, 271, 511, 279, 273, 272, 280, 0,
	0, 0, 274, 0, 0, 275, 266, 277, 276, 0,
	281, 270, 0, 265, 269, 0, 0, 278, 0, 267,
	0, 0, 0, 271, 268, 0, 273, 272, 0, 0,
	0, 279, 274, 0, 0, 275, 266, 0, 276, 0,
	280, 0, 0, 265, 269, 281, 270, 0, 0, 267,
	0, 0, 0, 278, 0, 0, 0, 0, 271, 277,
	0, 273, 272, 0, 0, 0, 268, 274, 0, 0,
	275, 266, 0, 276, 0, 0, 280, 0, 265, 269,
	506, 0, 0, 279, 267, 0, 0, 281, 270, 0,
	0, 0, 0, 0, 476, 277, 0, 0, 0, 0,
	271, 0, 268, 273, 272, 278, 0, 0, 0, 274,
	0, 0, 275, 266, 0, 276, 0, 0, 0, 279,
	265, 269, 0, 281, 270, 0, 267, 0, 280, 0,
	475, 0, 0, 0, 0, 277, 271, 0, 0, 273,
	272, 278, 0, 0, 0, 274, 0, 0, 275, 266,
	0, 276, 0, 0, 268, 0, 265, 269, 0, 279,
	0, 0, 267, 0, 280, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 281, 270, 0, 0, 0,
	0, 278, 474, 0, 0, 0, 0, 0, 271, 0,
	268, 273, 272, 0, 0, 279, 0, 274, 0, 0,
	275, 266, 277, 276, 280, 0, 0, 0, 265, 269,
	0, 281, 270, 0, 267, 0, 0, 278, 473, 0,
	0, 0, 0, 0, 271, 0, 279, 273, 272, 0,
	268, 0, 277, 274, 0, 0, 275, 266, 0, 276,
	280, 0, 0, 0, 265, 269, 0, 0, 278, 0,
	267, 281, 270, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 271, 0, 268, 273, 272, 0,
	0, 280, 0, 274, 0, 0, 275, 266, 278, 276,
	0, 0, 0, 0, 265, 269, 472, 281, 270, 0,
	267, 0, 0, 0, 471, 0, 0, 268, 0, 0,
	271, 280, 0, 273, 272, 0, 0, 0, 0, 274,
	460, 0, 275, 266, 0, 276, 0, 0, 281, 270,
	265, 269, 0, 0, 0, 0, 267, 268, 0, 0,
	0, 271, 0, 0, 273, 272, 0, 0, 0, 0,
	274, 0, 0, 275, 266, 0, 276, 0, 281, 270,
	120, 265, 269, 0, 0, 121, 122, 267, 0, 0,
	0, 271, 0, 0, 273, 272, 123, 124, 0, 0,
	274, 0, 0, 275, 266, 0, 276, 0, 0, 0,
	0, 265, 269, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 126, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 131,
	132, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 134,
}

var yyPact = [...]int{
	564, -1000, -1000, -1000, 1146, 288, 259, -1000, 38, -1000,
	37, -1000, -1000, -1000, -1000, -14, 186, -6, -1000, 2,
	-1000, 169, 81, -1000, 168, -6, -6, 2281, 1263, 31,
	1263, -1000, -155, -6, -6, 189, 81, 189, 995, -1000,
	-1000, 167, -1000, 2, -1000, -1000, -6, -1000, -3, -1000,
	-155, -1000, -1000, 189, 1263, -1000, -1000, 63, 1263, -1000,
	1263, 1263, 1263, 681, 1263, 629, 21, 20, 16, -1000,
	-1000, -36, -1000, -1000, -1000, -1000, -1000, -36, -36, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 233, -1000, -1000, 1414,
	125, 120, 118, -1000, -1000, -1000, -1000, -1000, 97, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -40, -1000, 96, -94,
	-1000, 93, -41, -42, 1263, 15, 1263, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 203, 2165, -1000, -1000, -1000,
	-46, -1000, -1000, 1263, -1000, -1000, -1000, -1000, -1000, 1263,
	-61, -71, -61, -61, -61, -61, -61, -71, -71, -61,
	-1000, -1000, -61, -61, -47, -61, -48, -71, -61, -61,
	-50, -61, -1000, -61, -51, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -71, 1263, -1000, -1000, -1000,
	73, -1000, -109, -1000, -109, -1000, -1000, 91, 13, 90,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 206, 202, 1263,
	-1000, 89, -1000, -1000, -1000, 11, -1000, -1000, -1000, 63,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 88, -1000, -1000,
	216, -145, 1263, -1000, -56, -1000, 52, 7, 5, 3,
	1263, 1263, 1263, -1000, 1263, -1000, -1000, -1000, -1000, 81,
	81, -155, -14, -45, 424, -6, -6, 2, -4, -4,
	84, 1263, 83, 1540, -6, 1263, 1263, 1263, 1263, 1263,
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
	1263, 1263, -1000, 838, 1263, -104, -106, 2165, -1000, -1000,
	1263, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1263, -1000, 1263, -1000, -1000, -1000, 1263, -1000, -1000,
	1263, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 295, -1000, 1263, 37, -1000, -1000, 2, 37,
	1263, -155, -6, -6, -3, 79, 2, 1263, -1000, 1263,
	330, 255, -1000, -1000, -1000, 72, 1263, -1000, -1000, -1000,
	1263, 1263, 1263, 1263, 1263, -1000, -1000, -1000, 1573, -1000,
	-1000, -1000, -1000, 1263, -1000, -108, 69, -1000, -1000, -1000,
	-1000, -1000, -86, -1000, -91, 1263, 2135, 122, -1000, 159,
	298, -1000, -6, -6, -1000, -1000, -1000, -1000, -1000, -6,
	-1000, -1000, -1000, -1000, -1000, -67, -67, -104, -104, -104,
	6, 6, 6, 6, 6, 6, 6, 295, 805, 962,
	1479, 1479, -1000, -110, 2104, -104, -1000, 2068, 2028, 1992,
	1940, 1904, 65, -1000, -1000, -1000, -1000, -1000, -1000, 64,
	-1000, -1000, -1000, 157, -1000, -1000, -1000, 221, -1000, -1000,
	-1000, 1263, -1000, -145, 62, -1000, -1000, -1000, -1000, 1263,
	-1000, -1000, 629, -1000, -4, -1000, -4, -1000, 61, 325,
	1263, -1000, 1263, 1263, 1263, 1263, 1540, -1000, -1000, -1000,
	-1000, 1263, -1000, 1263, 1263, 1263, 1263, 2, -6, 1263,
	1263, -1000, -1000, 1263, 1862, -1000, -117, -135, 1263, -155,
	1827, 117, 2165, 2165, -1000, -1000, -1000, 1797, 1768, 1738,
	1662, -1000, -1000, 54, 44, -145, -1000, -1000, -1000, -1000,
	-1000, 1263, -1000, 1263, -1000, 1263, -1000, -1000, 310, -1000,
	252, -1000, 2165, 1632, 1603, -1000, -7, -9, -10, -1000,
	-1000, 43, 42, -1000, 155, 316, -11, -16, -1000, -1000,
}

var yyPgo = [...]int{
	0, 412, 42, 246, 411, 410, 185, 28, 2, 405,
	58, 166, 404, 403, 402, 6, 122, 103, 37, 66,
	70, 401, 54, 47, 25, 3, 0, 4, 398, 396,
	11, 38, 393, 36, 14, 286, 7, 15, 34, 26,
	391, 12, 16, 24, 390, 389, 8, 383, 382, 381,
	378, 374, 9, 10, 371, 5, 1, 370, 369, 367,
	366, 45, 365, 17, 18, 363, 64, 57, 40, 362,
	359, 321, 351, 1393, 345, 344, 343, 20, 337,
}

var yyR1 = [...]int{
	0, 1, 1, 1, 1, 1, 1, 3, 3, 5,
	5, 7, 7, 10, 10, 12, 12, 15, 15, 11,
	11, 11, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 34, 34, 25, 25, 44, 28, 28, 40,
	40, 45, 45, 18, 33, 38, 47, 47, 49, 49,
	48, 48, 48, 48, 48, 48, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 42, 42, 50, 50, 50, 20, 20, 20, 20,
	51, 51, 51, 52, 52, 21, 21, 21, 53, 53,
	54, 54, 39, 39, 39, 39, 39, 35, 35, 35,
	46, 46, 58, 36, 36, 27, 27, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 43, 43, 43, 43, 43, 43, 23, 23, 59,
	59, 24, 24, 60, 60, 60, 60, 31, 31, 62,
	62, 41, 41, 19, 19, 65, 65, 65, 65, 64,
	64, 32, 63, 63, 57, 55, 55, 56, 56, 56,
	69, 70, 70, 70, 6, 6, 13, 16, 14, 17,
	9, 8, 61, 37, 2, 68, 67, 66, 22, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 72,
	26, 26, 26, 26, 26, 26, 26, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 76, 76, 76, 76, 76, 76,
	76, 76, 75, 75, 75, 75, 75, 78, 73, 77,
	71, 71,
}

var yyR2 = [...]int{
	0, 1, 1, 2, 2, 3, 2, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 4, 1, 1, 1, 1,
	2, 3, 5, 1, 2, 1, 2, 1, 5, 6,
	8, 5, 7, 1, 4, 2, 2, 1, 2, 4,
	4, 6, 2, 4, 3, 6, 1, 4, 1, 1,
	2, 2, 2, 2, 2, 4, 4, 4, 3, 1,
	1, 4, 1, 2, 1, 1, 1, 2, 1, 1,
	2, 1, 4, 1, 1, 2, 2, 1, 1, 2,
	2, 1, 3, 1, 3, 1, 3, 3, 0, 4,
	0, 2, 0, 2, 2, 7, 2, 0, 1, 1,
	3, 3, 6, 6, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 3, 1, 3, 0, 2, 3, 1, 3,
	1, 1, 1, 3, 5, 5, 7, 1, 1, 0,
	3, 1, 1, 3, 1, 2, 2, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 4, 3, 4, 3, 4, 3, 3, 1, 3,
	1, 3, 1, 4, 6, 4, 6, 1, 3, 1,
	3, 3, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 2, 3, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 3, 3, 3, 3, 3, 0,
	3, 2, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 2,
	2, 8, 2, 6, 2, 2, 2, 8, 2, 1,
	2, 6, 1, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 2, 3, 3, 3, 3, 3, 1, 3, 3,
	3, 5,
}

var yyChk = [...]int{
	-1000, -1, 30, 146, -2, -3, 2, 141, -4, 9,
	10, 131, -18, 15, 14, 22, 24, 25, 26, 27,
	29, 37, 42, 43, 48, 49, 50, 51, 52, 54,
	-32, -33, 66, 62, 63, 70, 69, 74, 75, -38,
	-39, 83, 89, 84, 88, 87, 90, 91, 92, 93,
	96, 97, 98, 99, 103, 106, 108, 116, 122, -43,
	12, 57, 77, 82, -57, 60, -10, -7, -20, -11,
	-12, -8, -9, 44, 45, 46, 126, -16, -17, 127,
	-13, -14, 174, 47, 144, 30, -3, 30, 30, 129,
	-6, -8, -11, 167, 179, -16, -17, -19, -65, -66,
	-67, -68, -6, 41, 141, 135, -20, -23, -59, -2,
	-24, -60, -11, -8, 81, -11, 81, -2, -2, -29,
	9, 14, 15, 25, 26, 62, 63, 70, 74, 87,
	97, 98, 99, 106, 116, -22, -26, -67, -68, -66,
	-20, -10, 149, 156, -73, -74, -75, -76, -5, 147,
	4, 6, 8, 11, 16, 18, 19, 20, 21, 23,
	32, 33, 36, 40, 55, 56, 59, 58, 64, 65,
	67, 73, 79, 80, 94, 95, 100, 101, 104, 105,
	109, 110, 111, 113, 114, 119, 72, -6, -7, -31,
	61, 81, -62, -64, -6, -10, -8, -22, -34, -7,
	-23, -23, -35, 39, 125, -11, -35, -22, 34, 81,
	-41, -64, -2, -37, 141, -34, -35, -22, -42, -50,
	35, 120, -15, -11, -8, -22, -46, -58, -22, -22,
	-22, -55, 118, 81, -69, -22, -22, -10, -7, -20,
	136, 136, 136, -71, 147, -71, -71, 30, -3, 115,
	115, 115, 130, -21, 147, 130, 149, 130, 147, 147,
	-22, 136, -22, 112, 50, 156, 149, 162, 102, 157,
	124, 136, 140, 139, 145, 148, 151, 7, 53, 31,
	76, 123, -51, 147, -72, -26, -78, -26, -73, -77,
	147, -73, -73, -73, -73, -73, -77, -77, -73, -73,
	-73, 147, -73, 147, -77, -73, -73, 147, -73, -73,
	147, -73, -73, -73, -73, -73, -73, -73, -73, -73,
	-73, -77, -26, -15, 81, -63, 130, 160, -63, 130,
	136, 130, 49, 50, 50, -22, 130, 136, -42, 130,
	-47, 42, -56, 175, 176, -22, -70, 133, 130, 160,
	130, 118, 136, 136, 136, -22, -22, -22, -26, -11,
	-11, -8, -19, 136, 158, -53, -54, -15, -20, -23,
	-2, -24, -61, 141, -61, 130, -26, -22, -28, 130,
	-30, -18, 49, 50, -33, -38, -39, 89, 91, 92,
	93, 108, -43, -2, -2, -26, -26, -26, -26, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, -26, 158, -52, -26, -26, 158, -26, -26, -26,
	-26, -26, -22, -31, -64, -31, -22, -34, -36, -2,
	-36, -37, -40, 130, -41, -22, -46, 5, -49, 54,
	78, 130, -55, -55, -22, -22, -22, -22, 158, 130,
	-22, 158, 130, 158, 130, 158, 130, -25, -44, -22,
	115, -27, 107, 121, 117, 85, 28, -2, -2, -2,
	158, 130, 158, 130, 130, 130, 130, 130, 130, 85,
	38, -55, -56, 130, -26, -53, -61, -61, 130, 5,
	-26, -22, -26, -26, -22, -30, -52, -26, -26, -26,
	-26, -15, -36, -22, -22, -55, 158, 158, 158, -25,
	-7, 107, -27, 130, 158, 130, 158, -45, 130, -48,
	130, -56, -26, -26, -26, 17, 13, 86, 68, 158,
	158, 141, 141, 141, 130, 130, 86, 13, 141, 141,
}

var yyDef = [...]int{
	0, -2, 1, 2, 0, 0, 0, 234, 8, 22,
	0, 26, 27, 28, 29, 0, 0, 33, 35, 0,
	37, 0, 0, 43, 0, 0, 0, 47, 0, 0,
	0, 56, 0, 58, 59, 159, 0, 159, 0, 69,
	70, 0, 72, 0, 74, 75, 76, 78, 79, 81,
	0, 83, 84, 159, 0, 87, 88, 0, 0, 91,
	0, 0, 0, 152, 0, 0, 0, 0, 0, 13,
	14, 11, 12, 136, 137, 138, 139, 19, 20, 21,
	15, 16, 231, 227, 229, 3, 0, 4, 6, 0,
	0, 0, 0, 224, 225, 19, 20, 30, 204, 205,
	206, 207, 208, 237, 236, 235, 145, 34, 188, 190,
	36, 192, 0, 0, 0, 0, 0, 45, 46, 48,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 0, 238, 239, 240, 241,
	140, 243, 249, 0, 252, 253, 254, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 268, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 9, 10, 52,
	0, 211, 197, 199, 0, 209, 210, 0, 0, 93,
	60, 61, 62, 157, 158, 63, 64, 0, 0, 0,
	73, 202, 77, 80, 233, 0, 85, 86, 89, 132,
	133, 134, 135, 17, 18, 90, 103, 161, 162, 104,
	107, 219, 0, 214, 216, 220, 0, 0, 0, 0,
	0, 0, 0, 230, 0, 226, 228, 5, 7, 0,
	0, 0, 0, 31, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 242, 0, 0, 251, 0, 307, 257, 258,
	0, 259, 260, 261, 262, 263, 264, 265, 266, 269,
	270, 0, 272, 0, 274, 275, 276, 0, 278, 280,
	0, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	292, 293, 301, 54, 0, 0, 212, 213, 0, 0,
	0, 0, 0, 0, 68, 100, 0, 0, 131, 0,
	0, 0, 153, 217, 218, 0, 0, 221, 222, 223,
	0, 0, 0, 0, 0, 182, 184, 186, 0, 23,
	24, 25, 203, 0, 146, 0, 148, 150, 151, 187,
	189, 191, 0, 232, 0, 0, 238, 0, 44, 0,
	49, 167, 0, 0, 170, 171, 172, 173, 174, 175,
	177, 178, 179, 180, 50, 244, 245, 246, 247, 248,
	294, 295, 296, 297, 298, 299, 300, 302, 303, 304,
	305, 306, 141, 0, 143, 250, 308, 0, 0, 0,
	0, 0, 0, 198, 200, 53, 57, 92, 65, 164,
	66, 67, 71, 0, 201, 82, 160, 0, 106, 108,
	109, 0, 215, 219, 0, 181, 183, 185, 310, 0,
	32, 147, 0, 193, 0, 195, 0, 38, 95, 0,
	0, 41, 0, 0, 0, 0, 0, 168, 169, 176,
	142, 0, 309, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 155, 0, 0, 149, 0, 0, 0, 0,
	39, 0, 165, 166, 97, 51, 144, 0, 0, 0,
	0, 55, 163, 102, 115, 219, 311, 194, 196, 94,
	96, 0, 42, 0, 273, 0, 281, 99, 0, 105,
	0, 156, 40, 0, 0, 101, 0, 0, 0, 271,
	277, 110, 111, 114, 0, 0, 0, 0, 112, 113,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerErrLoc interface {
	Lex(lval *yySymType) int
	Error(s string)
	ErrorLoc(s string, loc *yySymLoc)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			errMsg := yyErrorMessage(yystate, yytoken)
			if errLoc, ok := yylex.(yyLexerErrLoc); ok {
				errLoc.ErrorLoc(errMsg, &yyrcvr.lval.symLoc)
			} else {
				yylex.Error(errMsg)
			}

			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	yyVAL.symLoc.pos.line = yyS[yyp+1].symLoc.pos.line
	yyVAL.symLoc.pos.column = yyS[yyp+1].symLoc.pos.column
	yyVAL.symLoc.end.line = yyS[yypt].symLoc.end.line
	yyVAL.symLoc.end.column = yyS[yypt].symLoc.end.column

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:245
		{
			return 0
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:250
		{
			errorLoc(ELINETOOLONG)
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:255
		{
			// entering a line with stmt number 'nnn' and nothing else
			// is equivalent to 'DELETE nnn'

			executeDelete(yyDollar[1].tnodeVal)

			return 0
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:265
		{
			var tp []*tokenNode

			sp := yyDollar[1].snodeVal

			basicAssert(len(sp.operands) <= 3,
				"Too many immediate operands!")

			tp = sp.operands

			//
			// The action rule for COLON will reject any parse
			// if we are in immediate mode.  Nonetheless, check
			// to make sure we have one and only one stmtNode
			//

			basicAssert(sp.next == nil,
				"More than one statement in immediate mode")

			if g.programFile != nil {
				errorLoc("Immediate mode statement not allowed in files!")
			}

			switch sp.token {
			default:
				fatalError("%s in immediate mode", getTokenName(sp.token))

			case BYE:
				executeBye()

			case CONFIG:
				executeConfig()

			case CONT:
				executeCont()

			case DELETE:
				executeDelete(tp[0])

			case DENORM:
				executeDenorm()

			case HELP:
				if len(tp) == 0 {
					executeHelp(nil)
				} else {
					executeHelp(tp[0])
				}

			case KILL:
				executeKill(tp)

			case LET:
				executeLet(createExecutionState(sp))

			case LIST:
				if len(tp) == 0 {
					executeList(nil, false)
				} else {
					executeList(tp[0], false)
				}

			case LISTNH:
				if len(tp) == 0 {
					executeList(nil, true)
				} else {
					executeList(tp[0], true)
				}

			case NEW:
				executeNew(tp[0])

			case OLD:
				runtimeCheck(tp[0] != nil, "Filename required")
				executeOld(tp[0].tokenData.(string))

			case PRINT:
				executePrint(tp)

			case RELOAD:
				executeReload()

			case RENUMBER:
				executeRenumber(tp[0])

			case RUN:
				executeRun(nil, false)

			case RUNNH:
				executeRun(nil, true)

			case SAVE:
				executeSave(tp[0])

			case STATS:
				if g.printStats {
					myPrintln("Disabling statistics")
					g.printStats = false
				} else {
					myPrintln("Enabling statistics")
					g.printStats = true
				}

			case TRACE:
				executeTrace(tp[0])
			}

			return 0
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:376
		{
			head := yyDollar[2].snodeVal

			for sp := head; sp != nil; sp = sp.next {
				if head.next != nil {
					if sp.token == DEF {
						errorLoc("DEF must be the only statement on this line")
					} else if sp.token == FNEND {
						errorLoc("FNEND must be the only statement on this line")
					} else if sp.token == REM {
						errorLoc("REM must be the only statement on this line")
					} else if sp.token == STOP {
						errorLoc("STOP must be the only statement on this line")
					}
				}
			}

			//
			// Ensure we're not adding a statement after an existing
			// END statement
			//

			if g.endStmtNo != 0 && deferredStmtNo > g.endStmtNo {
				errorLoc("Statement must precede END statement")
			}

			head.stmtNoTokenLoc.pos.column = 1
			head.stmtNoTokenLoc.end.column = head.tokenLoc.pos.column - 2

			insertStmtNode(head, deferredStmtNo)

			//
			// The manual states that no statements following the
			// END statement are returned to the parser.
			// Close the file, ensuring that the lexer will read any
			// further tokens from the keyboard.  Due to the preceding
			// check, any numbered lines will be disallowed anyway!
			//

			if g.endStmtNo != 0 {
				closeProgramFile()
			}

			return 0
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:423
		{
			return 1
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:429
		{
			sp1 := yyDollar[1].snodeVal
			spn := yyDollar[3].snodeVal

			if deferredStmtNo == 0 {
				errorLoc("Multiple statements not allowed in immediate mode")
			}

			sp1.next = spn
			sp1.tokenLoc = yyDollar[1].symLoc
			yyVAL.snodeVal = sp1
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:443
		{
			sp := yyDollar[1].snodeVal
			sp.tokenLoc = yyDollar[1].symLoc

			yyVAL.snodeVal = sp
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:452
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:457
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:463
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:468
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:474
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:479
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:485
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:490
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:496
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:501
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:507
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:512
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:517
		{
			errorLoc("Invalid variable!", &yyDollar[1].symLoc)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:523
		{
			requireImmediateStatement(BYE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(BYE)
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:530
		{
			requireDeferredStatement(CHANGE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(CHANGE, yyDollar[2].tnodeVal, yyDollar[4].tnodeVal)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:537
		{
			requireDeferredStatement(CHANGE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(CHANGE, yyDollar[2].tnodeVal, yyDollar[4].tnodeVal)
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:544
		{
			requireDeferredStatement(CHANGE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(CHANGE, yyDollar[2].tnodeVal, yyDollar[4].tnodeVal)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:551
		{
			requireDeferredStatement(COMMENT, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(COMMENT)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:559
		{
			yyVAL.snodeVal = yyDollar[1].snodeVal
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:564
		{
			requireImmediateStatement(CONT, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(CONT)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:571
		{
			requireImmediateStatement(CONFIG, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(CONFIG)
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:578
		{
			tp2 := yyDollar[2].tnodeVal

			requireDeferredStatement(DATA, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(DATA, tp2)
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:587
		{
			tp2 := yyDollar[2].tnodeVal
			tp3 := createTokenNodeSlice(yyDollar[3].tnodeVal)
			tpx := make([]*tokenNode, 0)

			requireDeferredStatement(DEF, &yyDollar[1].symLoc)

			if len(tp3) > maxDefArgs {
				errorLoc("Too many function parameters", &yyDollar[3].symLoc)
			}

			tpx = append(tpx, tp2)
			tpx = append(tpx, nil)

			for ix := 0; ix < len(tp3); ix++ {
				tpx = append(tpx, tp3[ix])
			}

			yyVAL.snodeVal = makeStmtNode(DEF, tpx...)
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:609
		{
			requireDeferredStatement(DEF, &yyDollar[1].symLoc)

			tp2 := yyDollar[2].tnodeVal
			tp3 := createTokenNodeSlice(yyDollar[3].tnodeVal)
			tp5 := yyDollar[5].tnodeVal
			tpx := make([]*tokenNode, 0)

			if len(tp3) > maxDefArgs {
				errorLoc("Too many function parameters", &yyDollar[3].symLoc)
			}

			if isNumeric(tp2) {
				requireNumericOperand(tp5, &yyDollar[5].symLoc)
			} else {
				requireStringOperand(tp5, &yyDollar[5].symLoc)
			}

			if tp3 != nil {
				checkDefExpr(tp3, tp5)
			}

			tpx = append(tpx, tp2)
			tpx = append(tpx, tp5)

			for ix := 0; ix < len(tp3); ix++ {
				tpx = append(tpx, tp3[ix])
			}

			yyVAL.snodeVal = makeStmtNode(DEF, tpx...)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:642
		{
			requireImmediateStatement(DELETE, &yyDollar[1].symLoc)

			errorLoc("Missing statement number(s)", &yyDollar[1].symLoc)
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:649
		{
			requireImmediateStatement(DELETE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(DELETE, yyDollar[2].tnodeVal)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:656
		{
			requireImmediateStatement(DENORM, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(DENORM)
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:663
		{
			requireDeferredStatement(DIM, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(DIM, yyDollar[2].tnodeVal)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:670
		{
			requireDeferredStatement(END, &yyDollar[1].symLoc)

			if g.endStmtNo == 0 {
				lastStmt := stmtAvlTreeLastInOrder()
				if lastStmt != nil && lastStmt.stmtNo > deferredStmtNo {
					errorLoc("END statement must be last")
				}
			} else if g.endStmtNo != deferredStmtNo {
				errorLoc("Multiple END statements not allowed")
			}

			yyVAL.snodeVal = makeStmtNode(END)
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:686
		{
			requireDeferredStatement(FIELD, &yyDollar[1].symLoc)

			tp3 := yyDollar[3].tnodeVal

			requireNumericOperand(tp3, &yyDollar[3].symLoc)

			yyVAL.snodeVal = makeStmtNode(FIELD, tp3, yyDollar[5].tnodeVal)
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:697
		{
			tp2 := yyDollar[2].tnodeVal
			tp4 := yyDollar[4].tnodeVal
			tp6 := yyDollar[6].tnodeVal

			rpn2 := makeNrpnTokenNode(tp2)
			rpn4 := makeNrpnTokenNode(tp4)
			rpn6 := makeNrpnTokenNode(tp6)

			requireDeferredStatement(FOR, &yyDollar[1].symLoc)
			requireNumericOperand(rpn4, &yyDollar[4].symLoc)
			requireNumericOperand(rpn6, &yyDollar[6].symLoc)
			requireCompatibleNumericOperands(tp2, tp4, &yyDollar[4].symLoc, tp6, &yyDollar[6].symLoc)

			yyVAL.snodeVal = makeStmtNode(FOR, rpn2, rpn4, rpn6)
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:715
		{
			tp2 := yyDollar[2].tnodeVal
			tp4 := yyDollar[4].tnodeVal
			tp6 := yyDollar[6].tnodeVal
			tp8 := yyDollar[8].tnodeVal

			rpn2 := makeNrpnTokenNode(tp2)
			rpn4 := makeNrpnTokenNode(tp4)
			rpn6 := makeNrpnTokenNode(tp6)
			rpn8 := makeNrpnTokenNode(tp8)

			requireDeferredStatement(FOR, &yyDollar[1].symLoc)
			requireNumericOperand(rpn4, &yyDollar[4].symLoc)
			requireNumericOperand(rpn6, &yyDollar[6].symLoc)
			requireNumericOperand(rpn8, &yyDollar[8].symLoc)

			requireCompatibleNumericOperands(tp2, tp4, &yyDollar[4].symLoc, tp6,
				&yyDollar[6].symLoc, tp8, &yyDollar[8].symLoc)

			yyVAL.snodeVal = makeStmtNode(FOR, rpn2, rpn4, rpn6, rpn8)
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:738
		{
			tp2 := yyDollar[2].tnodeVal
			tp4 := yyDollar[4].tnodeVal
			tp5 := yyDollar[5].tnodeVal

			rpn2 := makeNrpnTokenNode(tp2)
			rpn4 := yyDollar[4].tnodeVal
			rpn5 := makeNrpnTokenNode(tp5)

			requireDeferredStatement(FOR, &yyDollar[1].symLoc)
			requireNumericOperand(rpn4, &yyDollar[4].symLoc)
			requireCompatibleNumericOperands(tp2, tp4, &yyDollar[4].symLoc)

			yyVAL.snodeVal = makeStmtNode(FOR, rpn2, rpn4, rpn5)
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:756
		{
			tp2 := yyDollar[2].tnodeVal
			tp4 := yyDollar[4].tnodeVal
			tp6 := yyDollar[6].tnodeVal
			tp7 := yyDollar[7].tnodeVal

			rpn2 := makeNrpnTokenNode(tp2)
			rpn4 := makeNrpnTokenNode(tp4)
			rpn6 := makeNrpnTokenNode(tp6)
			rpn7 := makeNrpnTokenNode(tp7)

			requireDeferredStatement(FOR, &yyDollar[1].symLoc)
			requireNumericOperand(rpn4, &yyDollar[4].symLoc)
			requireNumericOperand(rpn6, &yyDollar[6].symLoc)
			requireCompatibleNumericOperands(tp2, tp4, &yyDollar[4].symLoc, tp6, &yyDollar[6].symLoc)

			//
			// The following is NOT a typo.  To simplify the code
			// in executeFor, we ensure that the STEP expression,
			// if present, is always the last operand
			//

			yyVAL.snodeVal = makeStmtNode(FOR, rpn2, rpn4, rpn7, rpn6)
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:782
		{
			yyVAL.snodeVal = makeStmtNode(FNEND)
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:787
		{
			yyVAL.snodeVal = makeStmtNode(GET, yyDollar[3].tnodeVal, yyDollar[4].tnodeVal)
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:792
		{
			requireDeferredStatement(GOSUB, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(GOSUB, yyDollar[2].tnodeVal)
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:799
		{
			requireDeferredStatement(GOTO, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(GOTO, yyDollar[2].tnodeVal)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:806
		{
			requireImmediateStatement(HELP, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(HELP)
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:813
		{
			requireImmediateStatement(HELP, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(HELP, yyDollar[2].tnodeVal)
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:820
		{
			requireDeferredStatement(IF, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(IF, yyDollar[2].tnodeVal, yyDollar[4].tnodeVal)
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:827
		{
			requireDeferredStatement(IF, &yyDollar[1].symLoc)

			sp := makeStmtNode(GOTO, yyDollar[4].tnodeVal)
			tp := makeTokenNode(STMT, sp)
			yyVAL.snodeVal = makeStmtNode(IF, yyDollar[2].tnodeVal, tp)
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:836
		{
			requireDeferredStatement(IF, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(IF, yyDollar[2].tnodeVal, yyDollar[4].tnodeVal,
				yyDollar[6].tnodeVal)
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:844
		{
			requireDeferredStatement(INPUT, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(INPUT, nil, nil, yyDollar[2].tnodeVal)
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:851
		{
			requireDeferredStatement(INPUT, &yyDollar[1].symLoc)

			tp2 := yyDollar[2].tnodeVal

			requireNumericOperand(yyDollar[2].tnodeVal, &yyDollar[2].symLoc)

			yyVAL.snodeVal = makeStmtNode(INPUT, nil, tp2, yyDollar[4].tnodeVal)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:862
		{
			requireDeferredStatement(INPUT, &yyDollar[1].symLoc)

			tp3 := yyDollar[3].tnodeVal
			ilp := makeTokenNode(LINE)

			requireStringOperand(tp3, &yyDollar[3].symLoc)

			yyVAL.snodeVal = makeStmtNode(INPUT, ilp, nil, tp3)
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:874
		{
			requireDeferredStatement(INPUT, &yyDollar[1].symLoc)

			tp4 := yyDollar[4].tnodeVal
			ilp := makeTokenNode(LINE)
			tp6 := yyDollar[6].tnodeVal

			requireNumericOperand(tp4, &yyDollar[4].symLoc)
			requireStringOperand(tp6, &yyDollar[6].symLoc)

			yyVAL.snodeVal = makeStmtNode(INPUT, ilp, tp4, tp6)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:888
		{
			yyVAL.snodeVal = yyDollar[1].snodeVal
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:893
		{
			requireDeferredStatement(LSET, &yyDollar[1].symLoc)

			tp4 := yyDollar[4].tnodeVal

			requireStringOperand(tp4, &yyDollar[4].symLoc)

			yyVAL.snodeVal = makeStmtNode(LSET, yyDollar[2].tnodeVal, tp4)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:904
		{
			requireImmediateStatement(LIST, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(LIST)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:911
		{
			requireImmediateStatement(LISTNH, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(LISTNH)
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:918
		{
			requireImmediateStatement(LIST, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(LIST, yyDollar[2].tnodeVal)
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:925
		{
			requireImmediateStatement(LISTNH, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(LISTNH, yyDollar[2].tnodeVal)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:932
		{
			requireImmediateStatement(NEW, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(NEW, yyDollar[2].tnodeVal)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:939
		{
			requireDeferredStatement(NEXT, &yyDollar[1].symLoc)

			rpn := makeNrpnTokenNode(yyDollar[2].tnodeVal)
			yyVAL.snodeVal = makeStmtNode(NEXT, rpn)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:947
		{
			requireImmediateStatement(OLD, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(OLD, yyDollar[2].tnodeVal)
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:954
		{
			requireDeferredStatement(ON, &yyDollar[1].symLoc)

			stmtList := make([]*tokenNode, 1)
			stmtList[0] = yyDollar[2].tnodeVal
			stmtList = append(stmtList, createTokenNodeSlice(yyDollar[4].tnodeVal)...)
			yyVAL.snodeVal = makeStmtNode(ONGOSUB, stmtList...)
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:964
		{
			requireDeferredStatement(ON, &yyDollar[1].symLoc)

			stmtList := make([]*tokenNode, 1)
			stmtList[0] = yyDollar[2].tnodeVal
			stmtList = append(stmtList, createTokenNodeSlice(yyDollar[4].tnodeVal)...)
			yyVAL.snodeVal = makeStmtNode(ONGOTO, stmtList...)
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:974
		{
			requireDeferredStatement(ON, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(ONERROR, yyDollar[4].tnodeVal)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:981
		{
			requireDeferredStatement(ON, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(ONERROR)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:988
		{
			yyVAL.snodeVal = yyDollar[1].snodeVal
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:993
		{
			yyVAL.snodeVal = yyDollar[1].snodeVal
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:998
		{
			yyVAL.snodeVal = makeStmtNode(PUT, yyDollar[3].tnodeVal, yyDollar[4].tnodeVal)
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1003
		{
			requireDeferredStatement(RANDOMIZE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(RANDOMIZE)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1010
		{
			requireDeferredStatement(READ, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(READ, yyDollar[2].tnodeVal)
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1017
		{
			requireDeferredStatement(REM, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(REM)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1024
		{
			requireImmediateStatement(RELOAD, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(RELOAD)
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1031
		{
			requireImmediateStatement(RENUMBER, &yyDollar[1].symLoc)

			errorLoc("Missing statement number", &yyDollar[1].symLoc)
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1038
		{
			requireImmediateStatement(RENUMBER, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(RENUMBER, yyDollar[2].tnodeVal)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1045
		{
			requireDeferredStatement(RESTORE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(RESTORE)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1052
		{
			requireDeferredStatement(RESTORE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(RESUME)
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1059
		{
			requireDeferredStatement(RESTORE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(RESUME, yyDollar[2].tnodeVal)
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1066
		{
			requireDeferredStatement(RETURN, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(RETURN)
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1073
		{
			requireDeferredStatement(RSET, &yyDollar[1].symLoc)

			tp4 := yyDollar[4].tnodeVal

			requireStringOperand(tp4, &yyDollar[4].symLoc)

			yyVAL.snodeVal = makeStmtNode(RSET, yyDollar[2].tnodeVal, tp4)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1084
		{
			requireImmediateStatement(RUN, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(RUN)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1091
		{
			requireImmediateStatement(RUNNH, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(RUNNH)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1098
		{
			requireImmediateStatement(SAVE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(SAVE, yyDollar[2].tnodeVal)
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1105
		{
			requireDeferredStatement(SLEEP, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(SLEEP, yyDollar[2].tnodeVal)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1112
		{
			requireImmediateStatement(STATS, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(STATS)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1119
		{
			requireDeferredStatement(STOP, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(STOP)
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1126
		{
			requireImmediateStatement(TRACE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(TRACE, yyDollar[2].tnodeVal)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1133
		{
			requireDeferredStatement(WAIT, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(WAIT, yyDollar[2].tnodeVal)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1140
		{
			yyVAL.snodeVal = yyDollar[1].snodeVal
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1146
		{
			tp1 := makeSrpnTokenNode(yyDollar[1].tnodeVal)
			tp3 := yyDollar[3].tnodeVal

			tp1.next = tp3
			yyVAL.tnodeVal = tp1
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1155
		{
			yyVAL.tnodeVal = makeSrpnTokenNode(yyDollar[1].tnodeVal)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1161
		{
			tp1 := yyDollar[1].tnodeVal
			tp3 := yyDollar[3].tnodeVal

			tp1.next = tp3
			yyVAL.tnodeVal = tp1
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1170
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1176
		{
			tp1 := yyDollar[1].tnodeVal

			requireNumericOperand(tp1, &yyDollar[1].symLoc)

			tp3 := makeSrpnTokenNode(yyDollar[3].tnodeVal)

			yyVAL.tnodeVal = makeTokenNode(FIELDELEMENT, tp1, tp3)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1188
		{
			tp3 := yyDollar[3].tnodeVal

			requireNumericOperand(tp3, &yyDollar[3].symLoc)

			yyVAL.tnodeVal = makeTokenNode(RECORD, tp3)
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1197
		{
			yyVAL.tnodeVal = nil
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1203
		{
			tp3 := yyDollar[3].tnodeVal

			requireNumericOperand(tp3, &yyDollar[3].symLoc)

			yyVAL.tnodeVal = makeTokenNode(RECORD, tp3)
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1212
		{
			yyVAL.tnodeVal = nil
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1227
		{
			tp2 := yyDollar[2].tnodeVal

			requireDeferredStatement(CLOSE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(CLOSE, createTokenNodeSlice(tp2)...)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1237
		{
			tp2 := yyDollar[2].tnodeVal

			requireStringOperand(tp2, &yyDollar[2].symLoc)

			yyVAL.snodeVal = makeStmtNode(KILL, tp2)
		}
	case 105:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1247
		{
			tp2 := yyDollar[2].tnodeVal
			tp3 := yyDollar[3].tnodeVal
			tp6 := yyDollar[6].tnodeVal

			requireDeferredStatement(OPEN, &yyDollar[1].symLoc)
			requireStringOperand(tp2, &yyDollar[2].symLoc)
			requireNumericOperand(tp6, &yyDollar[6].symLoc)

			yyVAL.snodeVal = makeStmtNode(OPEN, tp2, tp3, tp6)
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1261
		{
			yyVAL.tnodeVal = yyDollar[2].tnodeVal
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1266
		{
			yyVAL.tnodeVal = makeTokenNode(INTEGER, int16(IOREAD|IOWRITE))
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1272
		{
			yyVAL.tnodeVal = makeTokenNode(INTEGER, int16(IOREAD))
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1277
		{
			yyVAL.tnodeVal = makeTokenNode(INTEGER, int16(IOWRITE))
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1300
		{
			yyVAL.tnodeVal = makeTokenNode(BYE)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1305
		{
			yyVAL.tnodeVal = makeTokenNode(CONFIG)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1310
		{
			yyVAL.tnodeVal = makeTokenNode(CONT)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1315
		{
			yyVAL.tnodeVal = makeTokenNode(DELETE)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1320
		{
			yyVAL.tnodeVal = makeTokenNode(DENORM)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1325
		{
			yyVAL.tnodeVal = makeTokenNode(LIST)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1330
		{
			yyVAL.tnodeVal = makeTokenNode(LISTNH)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1335
		{
			yyVAL.tnodeVal = makeTokenNode(NEW)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1340
		{
			yyVAL.tnodeVal = makeTokenNode(OLD)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1345
		{
			yyVAL.tnodeVal = makeTokenNode(RELOAD)
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1350
		{
			yyVAL.tnodeVal = makeTokenNode(RUN)
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1355
		{
			yyVAL.tnodeVal = makeTokenNode(RUNNH)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1360
		{
			yyVAL.tnodeVal = makeTokenNode(SAVE)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1365
		{
			yyVAL.tnodeVal = makeTokenNode(STATS)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1370
		{
			yyVAL.tnodeVal = makeTokenNode(TRACE)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1376
		{
			tp1 := yyDollar[1].tnodeVal

			tp1.next = yyDollar[2].tnodeVal

			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1385
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1391
		{
			yyVAL.tnodeVal = makeTokenNode(EXEC)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1396
		{
			yyVAL.tnodeVal = makeTokenNode(VARS)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1401
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1424
		{
			yyVAL.tnodeVal = makeTokenNode(FNFVAR, yyDollar[1].stringVal)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1429
		{
			yyVAL.tnodeVal = makeTokenNode(FNIVAR, yyDollar[1].stringVal)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1434
		{
			yyVAL.tnodeVal = makeTokenNode(FNSVAR, yyDollar[1].stringVal)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1439
		{
			errorLoc("Invalid function name", &yyDollar[1].symLoc)
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1445
		{
			yyVAL.tnodeVal = nil
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1450
		{
			yyVAL.tnodeVal = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1455
		{
			yyVAL.tnodeVal = yyDollar[2].tnodeVal
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1461
		{
			tp1 := yyDollar[1].tnodeVal
			yyVAL.tnodeVal = tp1
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1467
		{
			tp1 := yyDollar[1].tnodeVal

			tp1.next = yyDollar[3].tnodeVal
			yyVAL.tnodeVal = tp1
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1476
		{
			yyVAL.tnodeVal = nil
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1481
		{
			yyVAL.tnodeVal = nil
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1486
		{
			yyVAL.tnodeVal = yyDollar[2].tnodeVal
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1492
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1497
		{
			tp1 := yyDollar[1].tnodeVal

			tp1.next = yyDollar[3].tnodeVal
			yyVAL.tnodeVal = tp1
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1506
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1511
		{
			errorLoc("Invalid function parameter", &yyDollar[1].symLoc)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1517
		{
			yyVAL.snodeVal = makeStmtNode(PRINT, nil, nil, nil)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1522
		{
			t2 := yyDollar[2].tnodeVal

			for t := t2; t != nil; t = t.next {
				if t.next == nil {
					t.next = yyDollar[3].tnodeVal
					break
				}
			}

			yyVAL.snodeVal = makeStmtNode(PRINT, nil, nil, t2)
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1536
		{
			t3 := yyDollar[3].tnodeVal

			requireStringOperand(t3, &yyDollar[3].symLoc)

			yyVAL.snodeVal = makeStmtNode(PRINT, nil, t3, yyDollar[5].tnodeVal)
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1546
		{
			//
			// Formatting and zones are not relevant when doing
			// PRINT to a file, but the BNF requires us to accept
			// COMMA, etc.  After parsing the entire command, we
			// change anything other than NRPN or SRPN to SEMI,
			// which is ignored by basicPrint.  Since we are writing
			// to a file, ignoring any trailing COMMA or SEMI
			//

			t2 := yyDollar[2].tnodeVal
			t4 := yyDollar[4].tnodeVal

			for t := t4; t != nil; t = t.next {
				if t.token != NRPN && t.token != SRPN {
					t.token = SEMI
				}
			}

			requireNumericOperand(t2, &yyDollar[2].symLoc)

			yyVAL.snodeVal = makeStmtNode(PRINT, t2, nil, t4)
		}
	case 156:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1571
		{
			//
			// Formatting and zones are not relevant when doing
			// PRINT to a file, but the BNF requires us to accept
			// COMMA, etc.  After parsing the entire command, we
			// change anything other than NRPN or SRPN to SEMI,
			// to a file, ignoring any trailing COMMA or SEMI
			// which is ignored by basicPrint
			//

			t2 := yyDollar[2].tnodeVal
			t4 := yyDollar[4].tnodeVal
			t6 := yyDollar[6].tnodeVal

			for t := t6; t != nil; t = t.next {
				if t.token != NRPN && t.token != SRPN {
					t.token = SEMI
				}
			}

			requireNumericOperand(t2, &yyDollar[2].symLoc)
			requireStringOperand(t4, &yyDollar[4].symLoc)

			yyVAL.snodeVal = makeStmtNode(PRINT, t2, t4, t6)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1611
		{
			yyVAL.tnodeVal = makeTokenNode(FILENAME, yyDollar[1].stringVal)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1616
		{
			errorLoc("Invalid filename!")
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1620
		{
			yyVAL.tnodeVal = nil
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1626
		{
			tp1 := yyDollar[1].tnodeVal
			tp1.next = yyDollar[3].tnodeVal
			yyVAL.tnodeVal = tp1
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1633
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1639
		{
			tp1 := yyDollar[1].tnodeVal

			requireNumericOperand(tp1, &yyDollar[1].symLoc)

			yyVAL.tnodeVal = tp1
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1649
		{
			tp1 := yyDollar[1].tnodeVal
			tp1.next = yyDollar[3].tnodeVal
			yyVAL.tnodeVal = tp1
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1656
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1662
		{
			yyVAL.tnodeVal = makeTokenNode(WHILE, yyDollar[2].tnodeVal)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1667
		{
			yyVAL.tnodeVal = makeTokenNode(UNTIL, yyDollar[2].tnodeVal)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1687
		{
			yyVAL.tnodeVal = makeTokenNode(STMT, yyDollar[1].snodeVal)
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1692
		{
			sp := makeStmtNode(GOSUB, yyDollar[2].tnodeVal)
			yyVAL.tnodeVal = makeTokenNode(STMT, sp)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1698
		{
			sp := makeStmtNode(GOTO, yyDollar[2].tnodeVal)
			yyVAL.tnodeVal = makeTokenNode(STMT, sp)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1704
		{
			yyVAL.tnodeVal = makeTokenNode(STMT, yyDollar[1].snodeVal)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1709
		{
			yyVAL.tnodeVal = makeTokenNode(STMT, yyDollar[1].snodeVal)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1714
		{
			yyVAL.tnodeVal = makeTokenNode(STMT, yyDollar[1].snodeVal)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1719
		{
			sp := makeStmtNode(RANDOMIZE)
			yyVAL.tnodeVal = makeTokenNode(STMT, sp)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1725
		{
			sp := makeStmtNode(RESTORE)
			yyVAL.tnodeVal = makeTokenNode(STMT, sp)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1731
		{
			sp := makeStmtNode(RESUME)
			yyVAL.tnodeVal = makeTokenNode(STMT, sp)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1737
		{
			sp := makeStmtNode(RESUME, yyDollar[2].tnodeVal)
			yyVAL.tnodeVal = makeTokenNode(STMT, sp)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1743
		{
			sp := makeStmtNode(RANDOMIZE)
			yyVAL.tnodeVal = makeTokenNode(STMT, sp)
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1749
		{
			sp := makeStmtNode(STOP)
			yyVAL.tnodeVal = makeTokenNode(STMT, sp)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1755
		{
			yyVAL.tnodeVal = makeTokenNode(STMT, yyDollar[1].snodeVal)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1760
		{
			sp := makeStmtNode(GOTO, yyDollar[1].tnodeVal)
			yyVAL.tnodeVal = makeTokenNode(STMT, sp)
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1767
		{
			requireNumericOperand(yyDollar[4].tnodeVal, &yyDollar[4].symLoc)

			lhs := makeNrpnTokenNode(yyDollar[2].tnodeVal)

			yyVAL.snodeVal = makeStmtNode(LET, lhs, yyDollar[4].tnodeVal)
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1776
		{
			requireNumericOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)

			lhs := makeNrpnTokenNode(yyDollar[1].tnodeVal)

			yyVAL.snodeVal = makeStmtNode(LET, lhs, yyDollar[3].tnodeVal)
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1785
		{
			requireStringOperand(yyDollar[4].tnodeVal, &yyDollar[4].symLoc)

			lhs := makeSrpnTokenNode(yyDollar[2].tnodeVal)

			yyVAL.snodeVal = makeStmtNode(LET, lhs, yyDollar[4].tnodeVal)
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1794
		{
			requireStringOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)

			lhs := makeSrpnTokenNode(yyDollar[1].tnodeVal)

			yyVAL.snodeVal = makeStmtNode(LET, lhs, yyDollar[3].tnodeVal)
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1803
		{
			if isNumeric(yyDollar[2].tnodeVal) {
				requireNumericOperand(yyDollar[4].tnodeVal, &yyDollar[4].symLoc)
			} else {
				requireStringOperand(yyDollar[4].tnodeVal, &yyDollar[4].symLoc)
			}

			lhs := makeNrpnTokenNode(yyDollar[2].tnodeVal)

			yyVAL.snodeVal = makeStmtNode(LET, lhs, yyDollar[4].tnodeVal)
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1816
		{
			if isNumeric(yyDollar[1].tnodeVal) {
				requireNumericOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)
			} else {
				requireStringOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)
			}

			lhs := makeNrpnTokenNode(yyDollar[1].tnodeVal)

			yyVAL.snodeVal = makeStmtNode(LET, lhs, yyDollar[3].tnodeVal)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1830
		{
			yyDollar[1].tnodeVal.next = yyDollar[3].tnodeVal
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1836
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1842
		{
			firstStmt := yyDollar[1].tnodeVal.tokenData.(int16)
			lastStmt := yyDollar[3].tnodeVal.tokenData.(int16)

			if firstStmt > lastStmt {
				errorLoc("Invalid statement number range", &yyDollar[1].symLoc)
			}

			yyVAL.tnodeVal = makeTokenNode(INTPAIR, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1855
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1861
		{
			tp1 := yyDollar[1].tnodeVal
			tp2 := yyDollar[3].tnodeVal
			tp1.next = tp2

			yyVAL.tnodeVal = tp1
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1870
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1876
		{
			tp1 := yyDollar[1].tnodeVal
			tp1.operands = append(tp1.operands, yyDollar[3].tnodeVal)

			yyVAL.tnodeVal = tp1
		}
	case 194:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1884
		{
			tp1 := yyDollar[1].tnodeVal
			tp1.operands = append(tp1.operands, yyDollar[3].tnodeVal)
			tp1.operands = append(tp1.operands, yyDollar[5].tnodeVal)

			yyVAL.tnodeVal = tp1
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1893
		{
			tp1 := yyDollar[1].tnodeVal
			tp1.operands = append(tp1.operands, yyDollar[3].tnodeVal)

			yyVAL.tnodeVal = tp1
		}
	case 196:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1901
		{
			tp1 := yyDollar[1].tnodeVal
			tp1.operands = append(tp1.operands, yyDollar[3].tnodeVal)
			tp1.operands = append(tp1.operands, yyDollar[5].tnodeVal)

			yyVAL.tnodeVal = tp1
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1921
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1926
		{
			tp1 := yyDollar[1].tnodeVal

			tp1.next = yyDollar[3].tnodeVal
			yyVAL.tnodeVal = tp1
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1935
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1941
		{
			tp1 := yyDollar[1].tnodeVal
			tp3 := yyDollar[3].tnodeVal

			yyVAL.tnodeVal = makeTokenNode(INPUTPAIR, tp1, tp3)
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1950
		{
			tp1 := yyDollar[1].tnodeVal
			tp1.next = yyDollar[3].tnodeVal

			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1958
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1964
		{
			tp1 := yyDollar[1].tnodeVal
			tp1.next = yyDollar[3].tnodeVal

			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1972
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1978
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1983
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1988
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1993
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1999
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2004
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2021
		{
			tp1 := yyDollar[1].tnodeVal
			tp2 := yyDollar[2].tnodeVal
			tp3 := yyDollar[3].tnodeVal

			tp1.next = tp2
			tp2.next = tp3
			yyVAL.tnodeVal = tp1
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2032
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2038
		{
			yyVAL.tnodeVal = makeTokenNode(TRAILING_COMMA)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2043
		{
			yyVAL.tnodeVal = makeTokenNode(TRAILING_SEMI)
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2048
		{
			yyVAL.tnodeVal = nil
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2054
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2060
		{
			yyVAL.tnodeVal = makeTokenNode(DCOMMA)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2065
		{
			yyVAL.tnodeVal = makeTokenNode(COMMA)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2070
		{
			yyVAL.tnodeVal = makeTokenNode(SEMI)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2076
		{
			yyVAL.tnodeVal = makeTokenNode(STRING, yyDollar[1].stringVal)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2081
		{
			errorLoc("Unterminated string", &yyDollar[1].symLoc)
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2087
		{
			yyVAL.tnodeVal = makeTokenNode(SUBSCR, yyDollar[1].tnodeVal, yyDollar[2].tnodeVal)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2093
		{
			yyVAL.tnodeVal = makeTokenNode(FVAR, yyDollar[1].stringVal)
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2099
		{
			yyVAL.tnodeVal = makeTokenNode(SUBSCR, yyDollar[1].tnodeVal, yyDollar[2].tnodeVal)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2105
		{
			yyVAL.tnodeVal = makeTokenNode(IVAR, yyDollar[1].stringVal)
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2111
		{
			yyVAL.tnodeVal = makeTokenNode(SUBSCR, yyDollar[1].tnodeVal, yyDollar[2].tnodeVal)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2117
		{
			yyVAL.tnodeVal = makeTokenNode(SVAR, yyDollar[1].stringVal)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2132
		{
			i64 := yyDollar[1].int64Val

			checkInt16(ESUBSCRIPTERROR, i64, 1, &yyDollar[1].symLoc)

			yyVAL.tnodeVal = makeTokenNode(INTEGER, int16(i64))
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2142
		{
			i64 := yyDollar[1].int64Val

			checkInt16(EILLEGALLINENUMBER, i64, 0, &yyDollar[1].symLoc)

			tp := makeTokenNode(INTEGER, int16(i64))
			tp.tlocs = uint16(yyDollar[1].symLoc.pos.column) - 1
			tp.tloce = uint16(yyDollar[1].symLoc.end.column)
			yyVAL.tnodeVal = tp
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2155
		{
			i64 := yyDollar[1].int64Val

			checkInt16(EILLEGALLINENUMBER, i64, 1, &yyDollar[1].symLoc)

			tp := makeTokenNode(INTEGER, int16(i64))
			tp.tlocs = uint16(yyDollar[1].symLoc.pos.column) - 1
			tp.tloce = uint16(yyDollar[1].symLoc.end.column)
			yyVAL.tnodeVal = tp
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2168
		{
			//
			// Tricky: we are parsing an explicit integer, so we
			// need to take account of the asymmetry in signed
			// integers.  We negate the int64 token, and check
			// the magnitude, but don't actually negate the integer,
			// as that is done in the later arithmetic rule
			//

			i64 := yyDollar[1].int64Val

			if parsingUneg {
				i64 = -i64
			}

			checkInt16(EINTEGERERROR, i64, math.MinInt16, &yyDollar[1].symLoc)

			yyVAL.tnodeVal = makeTokenNode(INTEGER, int16(yyDollar[1].int64Val))
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2190
		{
			yyVAL.tnodeVal = makeTokenNode(FLOAT, float64(yyDollar[1].int64Val))
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2196
		{
			yyVAL.tnodeVal = makeTokenNode(FLOAT, yyDollar[1].float64Val)
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2209
		{
			yyVAL.tnodeVal = createRpnExpr(yyDollar[1].tnodeVal)
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2223
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2228
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2233
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2238
		{
			tp1 := yyDollar[1].tnodeVal
			tp2 := createTokenNodeSlice(yyDollar[2].tnodeVal)
			tpx := make([]any, 0)

			if len(tp2) > maxDefArgs {
				errorLoc("Too many function arguments", &yyDollar[2].symLoc)
			}

			//
			// To make life easier on the RPN processor, we push the
			// function token last, so it can tell how many values to
			// copy off the stack (it needs to match number and type of
			// arguments with formal parameters).  We also need to have
			// the number of arguments on the stack next to the function
			// token
			//

			for ix := 0; ix < len(tp2); ix++ {
				tpx = append(tpx, tp2[ix])
			}

			tpx = append(tpx, makeTokenNode(INTEGER, int16(len(tp2))))
			tpx = append(tpx, tp1)

			if isNumeric(tp1) {
				yyVAL.tnodeVal = makeTokenNode(NCALL, tpx...)
			} else {
				yyVAL.tnodeVal = makeTokenNode(SCALL, tpx...)
			}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2271
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2276
		{
			token := requireCompatibleOperands(PLUS, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)

			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2284
		{
			requireNumericOperand(yyDollar[1].tnodeVal, &yyDollar[1].symLoc)
			requireNumericOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)

			yyVAL.tnodeVal = makeTokenNode(MINUS, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2292
		{
			requireNumericOperand(yyDollar[1].tnodeVal, &yyDollar[1].symLoc)
			requireNumericOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)

			yyVAL.tnodeVal = makeTokenNode(STAR, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2300
		{
			requireNumericOperand(yyDollar[1].tnodeVal, &yyDollar[1].symLoc)
			requireNumericOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)

			yyVAL.tnodeVal = makeTokenNode(SLASH, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2308
		{
			requireNumericOperand(yyDollar[1].tnodeVal, &yyDollar[1].symLoc)
			requireNumericOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)

			yyVAL.tnodeVal = makeTokenNode(POW, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2315
		{
			parsingUneg = true
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2316
		{
			requireNumericOperand(yyDollar[3].tnodeVal, &yyDollar[2].symLoc)

			yyVAL.tnodeVal = makeTokenNode(UNEG, yyDollar[3].tnodeVal)

			parsingUneg = false
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2325
		{
			requireNumericOperand(yyDollar[2].tnodeVal, &yyDollar[2].symLoc)

			yyVAL.tnodeVal = yyDollar[2].tnodeVal
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2332
		{

			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2338
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2343
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2348
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2353
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2359
		{
			yyVAL.tnodeVal = makeTokenNode(ABS, yyDollar[2].tnodeVal)
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2364
		{
			yyVAL.tnodeVal = makeTokenNode(ASCII, yyDollar[2].tnodeVal)
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2369
		{
			yyVAL.tnodeVal = makeTokenNode(ATN, yyDollar[2].tnodeVal)
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2374
		{
			yyVAL.tnodeVal = makeTokenNode(CHRS, yyDollar[2].tnodeVal)
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2379
		{
			yyVAL.tnodeVal = makeTokenNode(COS, yyDollar[2].tnodeVal)
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2384
		{
			yyVAL.tnodeVal = makeTokenNode(CVTFS, yyDollar[2].tnodeVal)
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2389
		{
			yyVAL.tnodeVal = makeTokenNode(CVTIS, yyDollar[2].tnodeVal)
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2394
		{
			yyVAL.tnodeVal = makeTokenNode(CVTSF, yyDollar[2].tnodeVal)
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2399
		{
			yyVAL.tnodeVal = makeTokenNode(CVTSI, yyDollar[2].tnodeVal)
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2404
		{
			yyVAL.tnodeVal = makeTokenNode(DATES, yyDollar[2].tnodeVal)
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2409
		{
			yyVAL.tnodeVal = makeTokenNode(ERL)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2414
		{
			yyVAL.tnodeVal = makeTokenNode(ERR)
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2419
		{
			yyVAL.tnodeVal = makeTokenNode(EXP, yyDollar[2].tnodeVal)
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2424
		{
			yyVAL.tnodeVal = makeTokenNode(FIX, yyDollar[2].tnodeVal)
		}
	case 271:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2429
		{
			arg1 := yyDollar[3].tnodeVal
			arg2 := yyDollar[5].tnodeVal
			arg3 := yyDollar[7].tnodeVal

			requireNumericOperand(arg1, &yyDollar[3].symLoc)
			requireStringOperand(arg2, &yyDollar[5].symLoc)
			requireStringOperand(arg3, &yyDollar[7].symLoc)

			yyVAL.tnodeVal = makeTokenNode(INSTR, arg1, arg2, arg3)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2442
		{
			yyVAL.tnodeVal = makeTokenNode(INT, yyDollar[2].tnodeVal)
		}
	case 273:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2447
		{
			arg1 := yyDollar[3].tnodeVal
			arg2 := yyDollar[5].tnodeVal

			requireStringOperand(arg1, &yyDollar[3].symLoc)
			requireNumericOperand(arg2, &yyDollar[5].symLoc)

			yyVAL.tnodeVal = makeTokenNode(LEFT, arg1, arg2)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2458
		{
			yyVAL.tnodeVal = makeTokenNode(LEN, yyDollar[2].tnodeVal)
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2463
		{
			yyVAL.tnodeVal = makeTokenNode(LOG, yyDollar[2].tnodeVal)
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2468
		{
			yyVAL.tnodeVal = makeTokenNode(LOG10, yyDollar[2].tnodeVal)
		}
	case 277:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2473
		{
			arg1 := yyDollar[3].tnodeVal
			arg2 := yyDollar[5].tnodeVal
			arg3 := yyDollar[7].tnodeVal

			requireStringOperand(arg1, &yyDollar[3].symLoc)
			requireNumericOperand(arg2, &yyDollar[5].symLoc)
			requireNumericOperand(arg3, &yyDollar[7].symLoc)

			yyVAL.tnodeVal = makeTokenNode(MID, arg1, arg2, arg3)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2486
		{
			yyVAL.tnodeVal = makeTokenNode(NUMS, yyDollar[2].tnodeVal)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2491
		{
			yyVAL.tnodeVal = makeTokenNode(PI)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2496
		{
			yyVAL.tnodeVal = makeTokenNode(POS, yyDollar[2].tnodeVal)
		}
	case 281:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2501
		{
			arg1 := yyDollar[3].tnodeVal
			arg2 := yyDollar[5].tnodeVal

			requireStringOperand(arg1, &yyDollar[3].symLoc)
			requireNumericOperand(arg2, &yyDollar[5].symLoc)

			yyVAL.tnodeVal = makeTokenNode(RIGHT, arg1, arg2)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2512
		{
			yyVAL.tnodeVal = makeTokenNode(RND)
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2517
		{
			// ignore the argument!
			yyVAL.tnodeVal = makeTokenNode(RND)
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2523
		{
			yyVAL.tnodeVal = makeTokenNode(SGN, yyDollar[2].tnodeVal)
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2528
		{
			yyVAL.tnodeVal = makeTokenNode(SIN, yyDollar[2].tnodeVal)
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2533
		{
			yyVAL.tnodeVal = makeTokenNode(SPACES, yyDollar[2].tnodeVal)
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2538
		{
			yyVAL.tnodeVal = makeTokenNode(SQR, yyDollar[2].tnodeVal)
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2543
		{
			yyVAL.tnodeVal = makeTokenNode(SWAPI, yyDollar[2].tnodeVal)
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2548
		{
			yyVAL.tnodeVal = makeTokenNode(TAB, yyDollar[2].tnodeVal)
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2553
		{
			yyVAL.tnodeVal = makeTokenNode(TAN, yyDollar[2].tnodeVal)
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2558
		{
			yyVAL.tnodeVal = makeTokenNode(TIME, yyDollar[2].tnodeVal)
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2563
		{
			yyVAL.tnodeVal = makeTokenNode(TIMES, yyDollar[2].tnodeVal)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2568
		{
			yyVAL.tnodeVal = makeTokenNode(VAL, yyDollar[2].tnodeVal)
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2574
		{
			token := requireCompatibleOperands(APPROX, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2581
		{
			token := requireCompatibleOperands(EQ, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2588
		{
			token := requireCompatibleOperands(GE, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2595
		{
			token := requireCompatibleOperands(GT, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2602
		{
			token := requireCompatibleOperands(LE, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2609
		{
			token := requireCompatibleOperands(LT, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2616
		{
			token := requireCompatibleOperands(NE, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2623
		{
			requireIntegerOperand(yyDollar[2].tnodeVal, &yyDollar[2].symLoc)
			yyVAL.tnodeVal = makeTokenNode(NOT, yyDollar[2].tnodeVal)
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2630
		{
			requireIntegerOperand(yyDollar[1].tnodeVal, &yyDollar[1].symLoc)
			requireIntegerOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)
			token := requireCompatibleOperands(AND, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2639
		{
			requireIntegerOperand(yyDollar[1].tnodeVal, &yyDollar[1].symLoc)
			requireIntegerOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)
			token := requireCompatibleOperands(IMP, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2648
		{
			requireIntegerOperand(yyDollar[1].tnodeVal, &yyDollar[1].symLoc)
			requireIntegerOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)
			token := requireCompatibleOperands(EQV, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2657
		{
			requireIntegerOperand(yyDollar[1].tnodeVal, &yyDollar[1].symLoc)
			requireIntegerOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)
			token := requireCompatibleOperands(OR, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2666
		{
			requireIntegerOperand(yyDollar[1].tnodeVal, &yyDollar[1].symLoc)
			requireIntegerOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)
			token := requireCompatibleOperands(XOR, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2676
		{
			requireNumericOperand(yyDollar[1].tnodeVal, &yyDollar[1].symLoc)
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2683
		{
			yyVAL.tnodeVal = yyDollar[2].tnodeVal
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2689
		{
			requireStringOperand(yyDollar[2].tnodeVal, &yyDollar[2].symLoc)
			yyVAL.tnodeVal = yyDollar[2].tnodeVal
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2696
		{
			requireNumericOperand(yyDollar[2].tnodeVal, &yyDollar[2].symLoc)

			yyVAL.tnodeVal = yyDollar[2].tnodeVal
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2703
		{
			requireNumericOperand(yyDollar[2].tnodeVal, &yyDollar[2].symLoc)
			requireNumericOperand(yyDollar[4].tnodeVal, &yyDollar[4].symLoc)

			yyVAL.tnodeVal = makeTokenNode(INTPAIR, yyDollar[2].tnodeVal, yyDollar[4].tnodeVal)
		}
	}
	goto yystack /* stack new state and value */
}
