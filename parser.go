// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:1

package main

import __yyfmt__ "fmt"

//line parser.y:4

import (
	"math"
)

var parsingUneg bool

type yyPos struct {
	line   int
	column int
}

type yySymLoc struct {
	pos yyPos
	end yyPos
}

//line parser.y:11
type yySymType struct {
	yys        int
	symLoc     yySymLoc
	stringVal  string
	intVal     int
	int64Val   int64
	float64Val float64
	snodeVal   *stmtNode
	tnodeVal   *tokenNode
}

const ABS = 57346
const AS = 57347
const ASSERT = 57348
const ASCII = 57349
const AND = 57350
const ATN = 57351
const BYE = 57352
const CHANGE = 57353
const CHRS = 57354
const CLOSE = 57355
const CLUSTERSIZE = 57356
const CON = 57357
const CONFIG = 57358
const CONT = 57359
const COS = 57360
const COUNT = 57361
const CVTFS = 57362
const CVTIS = 57363
const CVTSF = 57364
const CVTSI = 57365
const DATA = 57366
const DATES = 57367
const DEF = 57368
const DELETE = 57369
const DENORM = 57370
const DET = 57371
const DIM = 57372
const DUMP = 57373
const EDIT = 57374
const ELSE = 57375
const END = 57376
const EOL = 57377
const EQV = 57378
const ERL = 57379
const ERR = 57380
const ERROR = 57381
const EXP = 57382
const FIELD = 57383
const FILE = 57384
const FILENAME = 57385
const FIX = 57386
const FLOAT = 57387
const FOR = 57388
const FNEND = 57389
const GET = 57390
const GOSUB = 57391
const GOTO = 57392
const HELP = 57393
const IDN = 57394
const IF = 57395
const IMP = 57396
const INPUT = 57397
const INSTR = 57398
const INV = 57399
const INT = 57400
const KILL = 57401
const LEN = 57402
const LEFT = 57403
const LET = 57404
const LINE = 57405
const LIST = 57406
const LISTNH = 57407
const LOG = 57408
const LOG10 = 57409
const LSET = 57410
const MAT = 57411
const MID = 57412
const MODE = 57413
const NEXT = 57414
const NEW = 57415
const NOT = 57416
const NUMS = 57417
const OLD = 57418
const ON = 57419
const OR = 57420
const OPEN = 57421
const OUTPUT = 57422
const PI = 57423
const POS = 57424
const PRINT = 57425
const PUT = 57426
const READ = 57427
const RECORD = 57428
const RECORDSIZE = 57429
const RELOAD = 57430
const REM = 57431
const RANDOMIZE = 57432
const RENUMBER = 57433
const RESTORE = 57434
const RESUME = 57435
const RETURN = 57436
const RIGHT = 57437
const RND = 57438
const RSET = 57439
const RUN = 57440
const RUNNH = 57441
const SAVE = 57442
const SGN = 57443
const SIN = 57444
const SLASH = 57445
const SLEEP = 57446
const SPACES = 57447
const SQR = 57448
const STATS = 57449
const STEP = 57450
const STOP = 57451
const SWAPI = 57452
const TAB = 57453
const TAN = 57454
const THEN = 57455
const TIME = 57456
const TIMES = 57457
const TO = 57458
const TRACE = 57459
const TRN = 57460
const UNTIL = 57461
const USING = 57462
const VAL = 57463
const VARS = 57464
const WHILE = 57465
const WAIT = 57466
const XOR = 57467
const ZER = 57468
const APPROX = 57469
const BADFILENAME = 57470
const BADFUNCNAME = 57471
const BADTOKEN = 57472
const BADVARIABLE = 57473
const CHAR = 57474
const COLON = 57475
const COMMA = 57476
const COMMENT = 57477
const CONCAT = 57478
const DCOMMA = 57479
const DOLLAR = 57480
const EINTEGER = 57481
const EQ = 57482
const EXEC = 57483
const FIELDELEMENT = 57484
const FILLCHAR = 57485
const FNFVAR = 57486
const FNIVAR = 57487
const FNSVAR = 57488
const FVAR = 57489
const GT = 57490
const GE = 57491
const INTEGER = 57492
const INPUTPAIR = 57493
const INTPAIR = 57494
const IVAR = 57495
const LE = 57496
const LONGLINE = 57497
const LPAR = 57498
const LT = 57499
const MINUS = 57500
const NCALL = 57501
const NE = 57502
const NRPN = 57503
const ONERROR = 57504
const ONGOSUB = 57505
const ONGOTO = 57506
const PLUS = 57507
const POUND = 57508
const POW = 57509
const RPAR = 57510
const SCALL = 57511
const SEMI = 57512
const SRPN = 57513
const STAR = 57514
const STMT = 57515
const STRGE = 57516
const STRGT = 57517
const STREQ = 57518
const STRING = 57519
const STRLE = 57520
const STRLT = 57521
const STRNE = 57522
const SUBSCR = 57523
const SUBSCR1 = 57524
const SUBSCR2 = 57525
const SVAR = 57526
const TRAILING_COMMA = 57527
const TRAILING_SEMI = 57528
const UNEG = 57529
const UPLUS = 57530
const USTRING = 57531

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ABS",
	"AS",
	"ASSERT",
	"ASCII",
	"AND",
	"ATN",
	"BYE",
	"CHANGE",
	"CHRS",
	"CLOSE",
	"CLUSTERSIZE",
	"CON",
	"CONFIG",
	"CONT",
	"COS",
	"COUNT",
	"CVTFS",
	"CVTIS",
	"CVTSF",
	"CVTSI",
	"DATA",
	"DATES",
	"DEF",
	"DELETE",
	"DENORM",
	"DET",
	"DIM",
	"DUMP",
	"EDIT",
	"ELSE",
	"END",
	"EOL",
	"EQV",
	"ERL",
	"ERR",
	"ERROR",
	"EXP",
	"FIELD",
	"FILE",
	"FILENAME",
	"FIX",
	"FLOAT",
	"FOR",
	"FNEND",
	"GET",
	"GOSUB",
	"GOTO",
	"HELP",
	"IDN",
	"IF",
	"IMP",
	"INPUT",
	"INSTR",
	"INV",
	"INT",
	"KILL",
	"LEN",
	"LEFT",
	"LET",
	"LINE",
	"LIST",
	"LISTNH",
	"LOG",
	"LOG10",
	"LSET",
	"MAT",
	"MID",
	"MODE",
	"NEXT",
	"NEW",
	"NOT",
	"NUMS",
	"OLD",
	"ON",
	"OR",
	"OPEN",
	"OUTPUT",
	"PI",
	"POS",
	"PRINT",
	"PUT",
	"READ",
	"RECORD",
	"RECORDSIZE",
	"RELOAD",
	"REM",
	"RANDOMIZE",
	"RENUMBER",
	"RESTORE",
	"RESUME",
	"RETURN",
	"RIGHT",
	"RND",
	"RSET",
	"RUN",
	"RUNNH",
	"SAVE",
	"SGN",
	"SIN",
	"SLASH",
	"SLEEP",
	"SPACES",
	"SQR",
	"STATS",
	"STEP",
	"STOP",
	"SWAPI",
	"TAB",
	"TAN",
	"THEN",
	"TIME",
	"TIMES",
	"TO",
	"TRACE",
	"TRN",
	"UNTIL",
	"USING",
	"VAL",
	"VARS",
	"WHILE",
	"WAIT",
	"XOR",
	"ZER",
	"APPROX",
	"BADFILENAME",
	"BADFUNCNAME",
	"BADTOKEN",
	"BADVARIABLE",
	"CHAR",
	"COLON",
	"COMMA",
	"COMMENT",
	"CONCAT",
	"DCOMMA",
	"DOLLAR",
	"EINTEGER",
	"EQ",
	"EXEC",
	"FIELDELEMENT",
	"FILLCHAR",
	"FNFVAR",
	"FNIVAR",
	"FNSVAR",
	"FVAR",
	"GT",
	"GE",
	"INTEGER",
	"INPUTPAIR",
	"INTPAIR",
	"IVAR",
	"LE",
	"LONGLINE",
	"LPAR",
	"LT",
	"MINUS",
	"NCALL",
	"NE",
	"NRPN",
	"ONERROR",
	"ONGOSUB",
	"ONGOTO",
	"PLUS",
	"POUND",
	"POW",
	"RPAR",
	"SCALL",
	"SEMI",
	"SRPN",
	"STAR",
	"STMT",
	"STRGE",
	"STRGT",
	"STREQ",
	"STRING",
	"STRLE",
	"STRLT",
	"STRNE",
	"SUBSCR",
	"SUBSCR1",
	"SUBSCR2",
	"SVAR",
	"TRAILING_COMMA",
	"TRAILING_SEMI",
	"UNEG",
	"UPLUS",
	"USTRING",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:2848

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 2722

var yyAct = [...]int{
	141, 81, 489, 485, 359, 234, 456, 243, 346, 382,
	224, 397, 238, 99, 430, 229, 221, 337, 199, 204,
	106, 85, 99, 194, 70, 558, 99, 484, 70, 360,
	361, 560, 113, 100, 559, 549, 62, 43, 80, 99,
	195, 99, 301, 42, 82, 33, 482, 110, 548, 280,
	98, 540, 365, 143, 498, 364, 389, 13, 205, 98,
	86, 483, 99, 98, 338, 222, 87, 112, 4, 193,
	104, 82, 142, 226, 144, 231, 98, 205, 98, 479,
	481, 93, 280, 206, 207, 433, 105, 86, 366, 103,
	96, 102, 250, 87, 281, 120, 121, 85, 72, 98,
	339, 200, 97, 220, 82, 196, 336, 119, 507, 74,
	95, 117, 268, 281, 108, 506, 70, 223, 279, 115,
	86, 94, 508, 118, 85, 107, 87, 145, 71, 380,
	116, 584, 71, 511, 510, 211, 209, 278, 216, 302,
	154, 202, 322, 319, 277, 109, 281, 315, 313, 297,
	295, 279, 96, 271, 270, 299, 202, 85, 266, 235,
	256, 583, 578, 210, 97, 212, 233, 577, 576, 7,
	236, 390, 225, 82, 371, 82, 370, 369, 82, 354,
	344, 342, 580, 146, 69, 232, 273, 368, 69, 86,
	254, 86, 253, 334, 86, 87, 251, 87, 99, 252,
	87, 367, 335, 579, 564, 308, 309, 79, 197, 562,
	523, 82, 99, 99, 99, 201, 316, 518, 340, 96,
	71, 348, 76, 77, 78, 513, 85, 86, 85, 505,
	201, 97, 99, 87, 333, 98, 480, 469, 461, 455,
	396, 392, 356, 353, 343, 341, 355, 269, 267, 98,
	98, 98, 249, 264, 92, 490, 214, 375, 492, 263,
	262, 261, 491, 99, 99, 581, 492, 276, 99, 98,
	491, 99, 384, 514, 393, 571, 69, 493, 412, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 422, 423,
	424, 425, 426, 427, 428, 235, 431, 432, 379, 70,
	98, 98, 388, 434, 351, 98, 236, 515, 98, 345,
	347, 347, 409, 403, 435, 386, 436, 467, 104, 402,
	437, 401, 247, 438, 255, 358, 5, 259, 391, 235,
	275, 89, 573, 398, 105, 91, 387, 103, 90, 102,
	236, 215, 468, 410, 411, 494, 99, 570, 572, 582,
	454, 213, 524, 140, 465, 203, 298, 458, 152, 441,
	376, 377, 459, 444, 218, 235, 151, 205, 115, 464,
	462, 470, 222, 378, 150, 471, 236, 296, 440, 116,
	228, 363, 442, 98, 237, 246, 240, 241, 242, 101,
	248, 198, 217, 114, 385, 349, 350, 79, 111, 82,
	239, 67, 383, 71, 294, 257, 258, 200, 227, 230,
	466, 200, 76, 77, 78, 86, 563, 457, 457, 260,
	357, 87, 561, 486, 447, 446, 460, 208, 32, 122,
	395, 265, 84, 83, 73, 75, 381, 153, 8, 1,
	272, 0, 274, 445, 0, 0, 0, 202, 0, 0,
	202, 202, 85, 0, 0, 0, 0, 99, 0, 69,
	0, 0, 0, 202, 512, 0, 0, 495, 496, 0,
	0, 0, 0, 0, 497, 0, 517, 516, 519, 0,
	0, 0, 99, 0, 0, 0, 384, 0, 0, 525,
	520, 0, 527, 528, 98, 0, 0, 0, 0, 289,
	431, 0, 532, 533, 534, 535, 530, 99, 99, 99,
	99, 536, 99, 99, 531, 0, 541, 542, 70, 98,
	543, 201, 0, 0, 201, 201, 546, 550, 0, 553,
	0, 409, 403, 0, 0, 0, 0, 201, 402, 521,
	401, 522, 0, 352, 98, 98, 98, 98, 551, 98,
	98, 565, 398, 566, 347, 567, 79, 568, 82, 0,
	99, 0, 410, 0, 0, 0, 0, 362, 0, 292,
	0, 76, 77, 78, 86, 372, 373, 374, 0, 235,
	87, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	236, 0, 0, 0, 280, 0, 394, 98, 0, 0,
	0, 0, 0, 0, 235, 537, 538, 539, 385, 235,
	235, 85, 0, 0, 0, 236, 293, 0, 282, 0,
	236, 236, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 449, 0, 0, 0, 0, 0, 0, 285,
	284, 0, 0, 0, 280, 286, 0, 0, 287, 278,
	0, 288, 0, 0, 0, 0, 277, 569, 281, 439,
	0, 0, 0, 279, 0, 443, 0, 0, 282, 450,
	0, 0, 0, 0, 451, 0, 0, 463, 69, 240,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 285,
	284, 472, 473, 474, 475, 286, 0, 0, 287, 278,
	0, 288, 0, 478, 0, 0, 277, 0, 281, 0,
	0, 0, 6, 279, 0, 487, 9, 0, 0, 0,
	10, 11, 0, 63, 0, 0, 15, 14, 0, 0,
	0, 0, 0, 0, 16, 452, 17, 18, 19, 0,
	20, 0, 21, 453, 22, 2, 0, 0, 82, 0,
	0, 23, 0, 0, 0, 0, 24, 25, 26, 27,
	28, 29, 0, 30, 86, 31, 0, 0, 0, 64,
	87, 509, 68, 448, 35, 36, 0, 0, 34, 37,
	0, 0, 39, 38, 0, 0, 40, 41, 0, 65,
	0, 0, 0, 66, 44, 46, 0, 0, 48, 47,
	45, 49, 50, 51, 52, 0, 0, 53, 54, 55,
	56, 0, 0, 526, 57, 0, 529, 58, 0, 59,
	0, 0, 0, 0, 0, 0, 0, 60, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 544, 545, 79,
	0, 82, 0, 0, 0, 12, 487, 0, 0, 0,
	0, 0, 0, 0, 76, 77, 78, 86, 0, 0,
	7, 0, 9, 87, 0, 3, 10, 11, 0, 63,
	0, 0, 15, 14, 0, 0, 0, 0, 0, 0,
	16, 0, 17, 18, 19, 0, 20, 0, 21, 0,
	22, 88, 0, 0, 85, 0, 0, 23, 0, 0,
	0, 0, 24, 25, 26, 27, 28, 29, 0, 30,
	0, 31, 0, 0, 0, 64, 0, 0, 68, 0,
	35, 36, 0, 0, 34, 37, 0, 0, 39, 38,
	0, 0, 40, 41, 0, 65, 0, 0, 0, 66,
	44, 46, 0, 0, 48, 47, 45, 49, 50, 51,
	52, 0, 0, 53, 54, 55, 56, 0, 0, 0,
	57, 0, 0, 58, 0, 59, 0, 0, 0, 0,
	0, 0, 0, 60, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 0, 0, 79, 0, 82, 0, 0,
	0, 12, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 77, 78, 86, 0, 0, 9, 0, 0, 87,
	10, 11, 0, 63, 0, 0, 15, 14, 0, 0,
	0, 0, 0, 0, 16, 0, 17, 18, 19, 0,
	20, 0, 21, 0, 22, 0, 0, 0, 0, 0,
	85, 23, 0, 0, 0, 0, 24, 25, 26, 27,
	28, 29, 0, 30, 0, 31, 0, 0, 0, 64,
	0, 0, 68, 0, 35, 36, 0, 0, 34, 37,
	0, 0, 39, 38, 0, 0, 40, 41, 0, 65,
	0, 0, 0, 66, 44, 46, 0, 0, 48, 47,
	45, 49, 50, 51, 52, 0, 0, 53, 54, 55,
	56, 0, 0, 0, 57, 0, 0, 58, 0, 59,
	0, 0, 0, 0, 0, 0, 0, 60, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 0, 0, 79,
	0, 82, 0, 0, 0, 12, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 77, 78, 86, 0, 155,
	0, 0, 156, 87, 157, 0, 0, 158, 0, 0,
	0, 0, 0, 159, 0, 160, 161, 162, 163, 0,
	164, 0, 0, 0, 165, 0, 0, 0, 0, 0,
	0, 0, 166, 167, 85, 168, 0, 0, 0, 169,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 170, 0, 171, 0, 173, 172, 0, 0, 0,
	0, 174, 175, 0, 0, 176, 0, 0, 0, 192,
	177, 0, 0, 0, 0, 0, 178, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 181, 0, 0, 0, 0, 182, 183, 0, 0,
	184, 185, 0, 0, 0, 186, 187, 188, 0, 189,
	190, 0, 0, 0, 0, 244, 191, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 82, 0, 0, 289,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 76,
	77, 78, 86, 0, 0, 107, 0, 0, 87, 155,
	0, 154, 156, 147, 157, 0, 0, 158, 0, 0,
	148, 245, 0, 159, 0, 160, 161, 162, 163, 0,
	164, 0, 96, 0, 165, 0, 0, 0, 0, 85,
	0, 0, 166, 167, 97, 168, 0, 0, 0, 169,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 170, 0, 171, 0, 173, 172, 0, 0, 0,
	0, 174, 175, 0, 0, 176, 0, 0, 0, 192,
	177, 0, 0, 0, 280, 0, 178, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 181, 0, 0, 0, 0, 182, 183, 282, 0,
	184, 185, 0, 0, 0, 186, 187, 188, 0, 189,
	190, 283, 0, 0, 0, 0, 191, 0, 0, 285,
	284, 0, 0, 0, 79, 286, 82, 0, 287, 278,
	0, 288, 0, 0, 108, 0, 277, 0, 281, 76,
	77, 78, 86, 279, 0, 107, 0, 0, 87, 0,
	0, 154, 0, 147, 0, 0, 0, 0, 0, 0,
	148, 0, 0, 429, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 155, 0, 0, 156, 0, 157, 85,
	0, 158, 0, 0, 97, 0, 0, 159, 0, 160,
	161, 162, 163, 0, 164, 0, 0, 0, 165, 0,
	0, 0, 0, 0, 0, 0, 166, 167, 219, 168,
	0, 0, 0, 169, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 170, 0, 171, 0, 173,
	172, 0, 0, 0, 0, 174, 175, 0, 0, 176,
	0, 0, 0, 192, 177, 0, 0, 0, 0, 0,
	178, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 180, 181, 0, 0, 0, 0,
	182, 183, 0, 0, 184, 185, 0, 0, 0, 186,
	187, 188, 0, 189, 190, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 76, 77, 78, 86, 0, 0, 107,
	0, 0, 87, 155, 0, 154, 156, 147, 157, 149,
	0, 158, 0, 0, 148, 0, 0, 159, 0, 160,
	161, 162, 163, 0, 164, 0, 96, 0, 165, 0,
	0, 0, 0, 85, 0, 0, 166, 167, 97, 168,
	0, 0, 0, 169, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 170, 0, 171, 0, 173,
	172, 0, 0, 0, 0, 174, 175, 0, 0, 176,
	0, 0, 0, 192, 177, 0, 0, 0, 0, 0,
	178, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 180, 181, 0, 0, 0, 0,
	182, 183, 0, 0, 184, 185, 0, 0, 0, 186,
	187, 188, 0, 189, 190, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	82, 289, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 76, 77, 78, 86, 0, 0, 107,
	0, 0, 87, 0, 0, 154, 0, 147, 0, 291,
	0, 0, 0, 0, 148, 300, 63, 303, 304, 305,
	306, 307, 0, 0, 310, 0, 96, 290, 311, 312,
	0, 314, 0, 85, 317, 318, 0, 320, 97, 321,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 331,
	332, 292, 399, 400, 0, 0, 289, 0, 0, 0,
	0, 0, 64, 0, 0, 68, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 65, 0, 291, 0, 66, 0, 0, 0,
	289, 0, 0, 404, 0, 405, 406, 407, 293, 0,
	282, 0, 290, 0, 0, 0, 0, 477, 0, 0,
	0, 0, 408, 283, 0, 0, 289, 0, 291, 0,
	0, 285, 284, 0, 0, 0, 292, 286, 0, 0,
	287, 278, 79, 288, 82, 0, 290, 0, 277, 0,
	281, 476, 0, 0, 291, 279, 0, 76, 77, 78,
	86, 280, 0, 7, 0, 0, 87, 0, 0, 0,
	292, 0, 290, 0, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 0, 282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 292, 85, 283, 0,
	0, 0, 291, 0, 0, 0, 285, 284, 0, 0,
	289, 0, 286, 0, 0, 287, 278, 293, 288, 282,
	290, 280, 0, 277, 0, 281, 575, 0, 0, 0,
	279, 0, 283, 0, 0, 0, 0, 0, 291, 0,
	285, 284, 0, 293, 292, 282, 286, 0, 0, 287,
	278, 0, 288, 0, 0, 0, 290, 277, 283, 281,
	574, 0, 0, 0, 279, 0, 285, 284, 0, 280,
	289, 0, 286, 0, 0, 287, 278, 0, 288, 0,
	292, 0, 0, 277, 0, 281, 557, 0, 0, 0,
	279, 293, 0, 282, 0, 0, 0, 0, 291, 0,
	556, 0, 0, 0, 0, 280, 283, 0, 0, 289,
	0, 0, 0, 0, 285, 284, 290, 0, 0, 0,
	286, 0, 0, 287, 278, 0, 288, 293, 0, 282,
	0, 277, 0, 281, 0, 289, 0, 291, 279, 0,
	292, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	285, 284, 0, 0, 0, 290, 286, 0, 0, 287,
	278, 0, 288, 291, 0, 280, 0, 277, 0, 281,
	555, 0, 0, 0, 279, 0, 0, 0, 0, 292,
	0, 290, 0, 0, 0, 0, 0, 293, 0, 282,
	0, 0, 0, 289, 0, 0, 554, 0, 0, 0,
	0, 0, 283, 0, 280, 292, 0, 0, 0, 552,
	285, 284, 0, 0, 0, 0, 286, 0, 0, 287,
	278, 291, 288, 0, 0, 0, 293, 277, 282, 281,
	280, 0, 289, 0, 279, 0, 0, 0, 0, 290,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 285,
	284, 0, 293, 0, 282, 286, 0, 0, 287, 278,
	291, 288, 0, 292, 0, 0, 277, 283, 281, 0,
	0, 0, 0, 279, 0, 285, 284, 0, 290, 0,
	0, 286, 0, 0, 287, 278, 0, 288, 280, 0,
	289, 0, 277, 0, 281, 547, 0, 0, 0, 279,
	0, 0, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 0, 282, 0, 0, 0, 0, 0, 291, 504,
	0, 0, 0, 0, 0, 283, 0, 280, 0, 0,
	0, 289, 0, 285, 284, 0, 290, 0, 0, 286,
	0, 0, 287, 278, 0, 288, 0, 0, 0, 293,
	277, 282, 281, 0, 0, 0, 0, 279, 503, 291,
	292, 0, 0, 0, 283, 289, 0, 0, 0, 0,
	0, 0, 285, 284, 0, 0, 0, 290, 286, 0,
	0, 287, 278, 0, 288, 280, 0, 0, 0, 277,
	0, 281, 0, 291, 0, 0, 279, 0, 0, 0,
	0, 292, 0, 0, 0, 0, 0, 293, 0, 282,
	0, 290, 0, 0, 0, 289, 502, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 280, 0, 0, 0,
	285, 284, 0, 0, 0, 292, 286, 0, 0, 287,
	278, 0, 288, 291, 0, 0, 0, 277, 293, 281,
	282, 0, 0, 0, 279, 0, 0, 501, 289, 0,
	280, 290, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 285, 284, 0, 0, 0, 0, 286, 0, 0,
	287, 278, 293, 288, 282, 292, 291, 0, 277, 0,
	281, 0, 289, 0, 0, 279, 0, 283, 0, 0,
	0, 0, 0, 0, 290, 285, 284, 0, 0, 0,
	280, 286, 0, 0, 287, 278, 0, 288, 289, 0,
	291, 0, 277, 0, 281, 500, 0, 0, 292, 279,
	0, 0, 293, 0, 282, 0, 0, 0, 290, 0,
	0, 499, 0, 0, 0, 0, 291, 283, 0, 0,
	0, 0, 0, 280, 0, 285, 284, 0, 0, 0,
	0, 286, 292, 0, 287, 278, 488, 288, 0, 0,
	0, 0, 277, 0, 281, 293, 0, 282, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 280, 292, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 285, 284,
	0, 0, 0, 0, 286, 0, 0, 287, 278, 293,
	288, 282, 0, 280, 0, 277, 0, 281, 0, 0,
	0, 0, 279, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 285, 284, 0, 293, 0, 282, 286, 0,
	0, 287, 278, 0, 288, 0, 0, 0, 0, 277,
	283, 281, 0, 0, 123, 0, 279, 0, 285, 284,
	124, 125, 0, 0, 286, 0, 0, 287, 278, 0,
	288, 126, 127, 0, 0, 277, 128, 281, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 130, 131,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	133, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 136, 137, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139,
}

var yyPact = [...]int{
	710, -1000, -1000, -1000, 856, 303, 300, -1000, 121, -1000,
	-1000, -87, -1000, -1000, -1000, -1000, -25, 78, 19, -1000,
	-27, -1000, -1000, -55, 47, -1000, -59, 19, 19, 2604,
	1619, 42, 1619, -1000, -163, 19, 19, 80, 213, 47,
	213, 1469, -1000, -1000, -63, -1000, -27, -1000, -1000, 19,
	-1000, 22, -1000, -163, -1000, -1000, 213, 1619, -1000, -1000,
	44, 1619, -1000, 1619, 1619, 1619, 1145, 1619, 427, 59,
	52, 50, -1000, -1000, 4, -1000, -1000, -1000, -1000, -1000,
	4, 4, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 292,
	-1000, -1000, 1000, 145, 144, 143, -1000, -1000, -1000, -1000,
	-1000, 119, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2,
	-1000, 114, -46, -1000, 113, -2, -3, 1619, 46, 1619,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	217, 2444, -1000, -1000, -1000, -6, -1000, -1000, 1619, -1000,
	-1000, -1000, -1000, -1000, 1619, -16, -17, -16, -16, -16,
	-16, -16, -17, -17, -16, -1000, -1000, -1000, -16, -16,
	-8, -16, -9, -17, -16, -16, -13, -16, -1000, -16,
	-14, -16, -16, -16, -16, -16, -16, -16, -16, -16,
	-16, -17, 1619, -1000, -1000, -1000, -60, -1000, -70, -1000,
	-70, -1000, -1000, 111, 41, 110, -1000, -1000, -1000, 40,
	47, 47, 47, -1000, -1000, -1000, -1000, -1000, 346, 254,
	1619, -1000, 109, -1000, -1000, -1000, 39, -1000, -1000, -1000,
	44, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 108,
	-1000, -1000, 279, -156, 1619, -1000, -82, -1000, 67, 37,
	36, 34, 1619, 1619, 1619, -1000, 1619, -1000, -1000, -1000,
	-1000, 47, 47, -163, -25, -11, 268, 19, 19, -27,
	21, 21, 107, 1619, 106, 1773, 19, 1619, 1619, 1619,
	1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619,
	1619, 1619, 1619, 1619, -1000, 1295, 1619, -73, -83, 2444,
	-1000, -1000, 1619, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1619, -1000, 1619, -1000, -1000, -1000, 1619,
	-1000, -1000, 1619, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 541, -1000, 1619, -87, -1000, -1000,
	-27, -87, 1619, -163, 617, -156, -1000, 105, -1000, 19,
	19, 22, 104, -27, 1619, -1000, 1619, 349, 262, -1000,
	-1000, -1000, 103, 1619, -1000, -1000, -1000, 1619, 1619, 1619,
	1619, 1619, -1000, -1000, -1000, 1743, -1000, -1000, -1000, -1000,
	1619, -1000, -89, 102, -1000, -1000, -1000, -1000, -1000, -88,
	-1000, -107, 1619, 2410, 147, -1000, 191, 312, -1000, 19,
	19, -1000, -1000, -1000, -1000, -1000, 19, -1000, -1000, -1000,
	-1000, -1000, -54, -54, -73, -73, -73, -21, -21, -21,
	-21, -21, -21, -21, 541, 2470, 491, 1271, 1271, -1000,
	-114, 2367, -73, -1000, 2317, 2283, 2242, 2184, 2145, 95,
	-1000, -1000, -1000, -1000, -1000, -50, -1000, -1000, 1619, -1000,
	-1000, -22, -23, -1000, -1000, 47, -1000, 91, -1000, -1000,
	-1000, 187, -1000, -1000, -1000, 265, -1000, -1000, -1000, 1619,
	-1000, -156, 83, -1000, -1000, -1000, -1000, 1619, -1000, -1000,
	427, -1000, 21, -1000, 21, -1000, 76, 347, 1619, -1000,
	1619, 1619, 1619, 1619, 1773, -1000, -1000, -1000, -1000, 1619,
	-1000, 1619, 1619, 1619, 1619, -27, 47, 47, 47, -117,
	-27, -27, -1000, 19, 1619, 1619, -1000, -1000, 1619, 2087,
	-1000, -120, -133, 1619, -163, 2061, 139, 2444, 2444, -1000,
	-1000, -1000, 2022, 1962, 1926, 1878, -1000, -1000, -1000, -1000,
	-147, -134, -137, -1000, 75, 70, -156, -1000, -1000, -1000,
	-1000, -1000, 1619, -1000, 1619, -1000, 1619, -1000, 47, -1000,
	-1000, -1000, 328, -1000, 261, -1000, 2444, 1852, 1818, -1000,
	-1000, 18, 17, 12, -1000, -1000, 69, 48, -1000, 178,
	335, 11, -19, -1000, -1000,
}

var yyPgo = [...]int{
	0, 439, 67, 326, 438, 437, 69, 23, 109, 435,
	183, 98, 434, 433, 432, 5, 8, 38, 1, 57,
	33, 127, 431, 322, 47, 32, 3, 0, 2, 430,
	429, 11, 40, 428, 45, 19, 427, 351, 6, 10,
	43, 37, 426, 16, 15, 36, 425, 424, 4, 423,
	422, 12, 420, 416, 410, 409, 404, 14, 9, 402,
	7, 401, 400, 398, 393, 56, 391, 17, 18, 389,
	74, 72, 53, 385, 381, 324, 377, 1629, 374, 366,
	358, 42, 356,
}

var yyR1 = [...]int{
	0, 1, 1, 1, 1, 1, 1, 3, 3, 5,
	5, 7, 7, 10, 10, 12, 12, 15, 15, 16,
	16, 11, 11, 11, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 36, 36, 36,
	36, 36, 36, 46, 46, 46, 46, 47, 47, 47,
	47, 47, 35, 35, 26, 26, 49, 29, 29, 42,
	42, 50, 50, 19, 34, 40, 52, 52, 54, 54,
	53, 53, 53, 53, 53, 53, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 44, 44, 55, 55, 55, 55, 21,
	21, 21, 21, 56, 56, 56, 57, 57, 22, 22,
	22, 58, 58, 59, 59, 41, 41, 41, 41, 41,
	37, 37, 37, 51, 51, 62, 38, 38, 28, 28,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 45, 45, 45, 45, 45, 45,
	24, 24, 63, 63, 25, 25, 64, 64, 64, 64,
	32, 32, 66, 66, 43, 43, 20, 20, 69, 69,
	69, 69, 68, 68, 33, 67, 67, 61, 60, 60,
	48, 48, 48, 73, 74, 74, 74, 6, 6, 13,
	17, 14, 18, 9, 8, 65, 39, 2, 72, 71,
	70, 23, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 76, 27, 27, 27, 27, 27, 27, 27,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 80, 80,
	80, 80, 80, 80, 80, 80, 79, 79, 79, 79,
	79, 82, 77, 81, 75, 75,
}

var yyR2 = [...]int{
	0, 1, 1, 2, 2, 3, 2, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 4, 4, 4, 1,
	1, 1, 1, 2, 3, 5, 1, 2, 1, 2,
	1, 1, 5, 6, 8, 5, 7, 1, 4, 2,
	2, 1, 2, 4, 4, 6, 2, 4, 3, 6,
	1, 4, 1, 1, 2, 2, 2, 2, 2, 2,
	4, 4, 4, 3, 1, 1, 4, 1, 2, 1,
	1, 1, 2, 1, 1, 2, 1, 4, 1, 1,
	2, 2, 1, 1, 2, 2, 1, 3, 3, 3,
	3, 2, 2, 3, 3, 3, 5, 1, 1, 4,
	4, 1, 3, 1, 3, 1, 3, 3, 0, 4,
	0, 2, 0, 2, 2, 7, 2, 0, 1, 1,
	3, 3, 6, 6, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 3, 1, 3, 0, 2,
	3, 1, 3, 1, 1, 1, 3, 5, 5, 7,
	1, 1, 0, 3, 1, 1, 3, 1, 2, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 1, 4, 3, 4, 3, 4, 3,
	3, 1, 3, 1, 3, 1, 4, 6, 4, 6,
	1, 3, 1, 3, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 2, 3, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 3, 3, 3,
	3, 3, 0, 3, 2, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 2, 8, 2, 6, 2, 2,
	2, 8, 2, 1, 2, 6, 1, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 2, 3, 3, 3, 3,
	3, 1, 3, 3, 3, 5,
}

var yyChk = [...]int{
	-1000, -1, 35, 155, -2, -3, 2, 150, -4, 6,
	10, 11, 135, -19, 17, 16, 24, 26, 27, 28,
	30, 32, 34, 41, 46, 47, 48, 49, 50, 51,
	53, 55, -33, -34, 68, 64, 65, 69, 73, 72,
	76, 77, -40, -41, 84, 90, 85, 89, 88, 91,
	92, 93, 94, 97, 98, 99, 100, 104, 107, 109,
	117, 124, -45, 13, 59, 79, 83, -61, 62, -10,
	-7, -21, -11, -12, -8, -9, 144, 145, 146, 129,
	-17, -18, 131, -13, -14, 184, 147, 153, 35, -3,
	35, 35, 133, -6, -8, -11, 177, 189, -17, -18,
	-20, -69, -70, -71, -72, -6, 45, 150, 139, -21,
	-24, -63, -2, -25, -64, -11, -8, 166, -11, 166,
	-2, -2, -30, 10, 16, 17, 27, 28, 32, 59,
	64, 65, 73, 76, 88, 98, 99, 100, 107, 117,
	-23, -27, -71, -72, -70, -21, -10, 158, 165, -77,
	-78, -79, -80, -5, 156, 4, 7, 9, 12, 18,
	20, 21, 22, 23, 25, 29, 37, 38, 40, 44,
	56, 58, 61, 60, 66, 67, 70, 75, 81, 82,
	95, 96, 101, 102, 105, 106, 110, 111, 112, 114,
	115, 121, 74, -6, -7, -32, 63, 166, -66, -68,
	-6, -10, -8, -23, -35, -7, -24, -24, -36, -11,
	83, 55, 85, -37, 43, 128, -11, -37, -23, 39,
	166, -43, -68, -2, -39, 150, -35, -37, -23, -44,
	-55, 31, 141, 122, -15, -11, -8, -23, -51, -62,
	-23, -23, -23, -60, 120, 166, -73, -23, -23, -10,
	-7, -21, 140, 140, 140, -75, 156, -75, -75, 35,
	-3, 116, 116, 116, 134, -22, 156, 134, 158, 134,
	156, 156, -23, 140, -23, 113, 50, 165, 158, 172,
	103, 167, 127, 140, 149, 148, 154, 157, 160, 8,
	54, 36, 78, 125, -56, 156, -76, -27, -82, -27,
	-77, -81, 156, -77, -77, -77, -77, -77, -81, -81,
	-77, -77, -77, 156, -77, 156, -81, -77, -77, 156,
	-77, -77, 156, -77, -77, -77, -77, -77, -77, -77,
	-77, -77, -77, -81, -27, -15, 166, -67, 134, 170,
	-67, 134, 140, 134, 140, -11, -16, -11, -16, 49,
	50, 50, -23, 134, 140, -44, 134, -52, 46, -48,
	185, 186, -23, -74, 137, 134, 170, 134, 120, 140,
	140, 140, -23, -23, -23, -27, -11, -11, -8, -20,
	140, 168, -58, -59, -15, -21, -24, -2, -25, -65,
	150, -65, 134, -27, -23, -29, 134, -31, -19, 49,
	50, -34, -40, -41, 90, 92, 93, 94, 109, -45,
	-2, -2, -27, -27, -27, -27, -27, -27, -27, -27,
	-27, -27, -27, -27, -27, -27, -27, -27, -27, 168,
	-57, -27, -27, 168, -27, -27, -27, -27, -27, -23,
	-32, -68, -32, -23, -35, -11, -46, -47, 156, 15,
	52, 57, 118, 126, -48, 134, -38, -2, -38, -39,
	-42, 134, -43, -23, -51, 5, -54, 55, 80, 134,
	-60, -60, -23, -23, -23, -23, 168, 134, -23, 168,
	134, 168, 134, 168, 134, -26, -49, -23, 116, -28,
	108, 123, 119, 86, 33, -2, -2, -2, 168, 134,
	168, 134, 134, 134, 134, 134, 165, 158, 172, -23,
	156, 156, -16, 134, 86, 42, -60, -48, 134, -27,
	-58, -65, -65, 134, 5, -27, -23, -27, -27, -23,
	-31, -57, -27, -27, -27, -27, -15, -11, -11, -11,
	168, -15, -15, -38, -23, -23, -60, 168, 168, 168,
	-26, -7, 108, -28, 134, 168, 134, 168, 172, 168,
	168, -50, 134, -53, 134, -48, -27, -27, -27, -11,
	19, 14, 87, 71, 168, 168, 150, 150, 150, 134,
	134, 87, 14, 150, 150,
}

var yyDef = [...]int{
	0, -2, 1, 2, 0, 0, 0, 257, 8, 24,
	25, 0, 29, 30, 31, 32, 0, 0, 36, 38,
	0, 40, 41, 0, 0, 47, 0, 0, 0, 51,
	0, 0, 0, 60, 0, 62, 63, 0, 182, 0,
	182, 0, 74, 75, 0, 77, 0, 79, 80, 81,
	83, 84, 86, 0, 88, 89, 182, 0, 92, 93,
	0, 0, 96, 0, 0, 0, 175, 0, 0, 0,
	0, 0, 13, 14, 11, 12, 159, 160, 161, 162,
	21, 22, 23, 15, 16, 254, 250, 252, 3, 0,
	4, 6, 0, 0, 0, 0, 247, 248, 21, 22,
	33, 227, 228, 229, 230, 231, 260, 259, 258, 168,
	37, 211, 213, 39, 215, 0, 0, 0, 0, 0,
	49, 50, 52, 136, 137, 138, 139, 140, 141, 142,
	143, 144, 145, 146, 147, 148, 149, 150, 151, 152,
	0, 261, 262, 263, 264, 163, 266, 272, 0, 275,
	276, 277, 278, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 303, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 9, 10, 56, 0, 234, 220, 222,
	0, 232, 233, 0, 0, 113, 64, 65, 66, 0,
	0, 0, 0, 67, 180, 181, 68, 69, 0, 0,
	0, 78, 225, 82, 85, 256, 0, 90, 91, 94,
	154, 155, 156, 157, 158, 17, 18, 95, 123, 184,
	185, 124, 127, 242, 0, 237, 239, 243, 0, 0,
	0, 0, 0, 0, 0, 253, 0, 249, 251, 5,
	7, 0, 0, 0, 0, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 274, 0, 331,
	280, 281, 0, 282, 283, 284, 285, 286, 287, 288,
	289, 293, 294, 0, 296, 0, 298, 299, 300, 0,
	302, 304, 0, 307, 308, 309, 310, 311, 312, 313,
	314, 315, 316, 317, 325, 58, 0, 0, 235, 236,
	0, 0, 0, 0, 0, 242, 101, 20, 102, 0,
	0, 73, 120, 0, 0, 153, 0, 0, 0, 176,
	240, 241, 0, 0, 244, 245, 246, 0, 0, 0,
	0, 0, 205, 207, 209, 0, 26, 27, 28, 226,
	0, 169, 0, 171, 173, 174, 210, 212, 214, 0,
	255, 0, 0, 261, 0, 48, 0, 53, 190, 0,
	0, 193, 194, 195, 196, 197, 198, 200, 201, 202,
	203, 54, 267, 268, 269, 270, 271, 318, 319, 320,
	321, 322, 323, 324, 326, 327, 328, 329, 330, 164,
	0, 166, 273, 332, 0, 0, 0, 0, 0, 0,
	221, 223, 57, 61, 112, 97, 98, 99, 0, 107,
	108, 0, 0, 111, 100, 0, 70, 187, 71, 72,
	76, 0, 224, 87, 183, 0, 126, 128, 129, 0,
	238, 242, 0, 204, 206, 208, 334, 0, 35, 170,
	0, 216, 0, 218, 0, 42, 115, 0, 0, 45,
	0, 0, 0, 0, 0, 191, 192, 199, 165, 0,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 19, 0, 0, 0, 177, 178, 0, 0,
	172, 0, 0, 0, 0, 43, 0, 188, 189, 117,
	55, 167, 0, 0, 0, 0, 59, 103, 104, 105,
	0, 0, 0, 186, 122, 135, 242, 335, 217, 219,
	114, 116, 0, 46, 0, 297, 0, 305, 0, 109,
	110, 119, 0, 125, 0, 179, 44, 0, 0, 106,
	121, 0, 0, 0, 295, 301, 130, 131, 134, 0,
	0, 0, 0, 132, 133,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerErrLoc interface {
	Lex(lval *yySymType) int
	Error(s string)
	ErrorLoc(s string, loc *yySymLoc)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			errMsg := yyErrorMessage(yystate, yytoken)
			if errLoc, ok := yylex.(yyLexerErrLoc); ok {
				errLoc.ErrorLoc(errMsg, &yyrcvr.lval.symLoc)
			} else {
				yylex.Error(errMsg)
			}

			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	yyVAL.symLoc.pos.line = yyS[yyp+1].symLoc.pos.line
	yyVAL.symLoc.pos.column = yyS[yyp+1].symLoc.pos.column
	yyVAL.symLoc.end.line = yyS[yypt].symLoc.end.line
	yyVAL.symLoc.end.column = yyS[yypt].symLoc.end.column

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:254
		{
			return 0
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:259
		{
			errorLoc(ELINETOOLONG)
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:264
		{
			// entering a line with stmt number 'nnn' and nothing else
			// is equivalent to 'DELETE nnn'

			executeDelete(yyDollar[1].tnodeVal)

			return 0
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:274
		{
			var tp []*tokenNode

			sp := yyDollar[1].snodeVal

			basicAssert(len(sp.operands) <= 3,
				"Too many immediate operands!")

			tp = sp.operands

			//
			// The action rule for COLON will reject any parse
			// if we are in immediate mode.  Nonetheless, check
			// to make sure we have one and only one stmtNode
			//

			basicAssert(sp.next == nil,
				"More than one statement in immediate mode")

			if g.programFile != nil {
				errorLoc("Immediate mode statement not allowed in files!")
			}

			switch sp.token {
			default:
				unexpectedTokenError(sp.token)

			case ASSERT:
				executeAssert()

			case BYE:
				executeBye()

			case CONFIG:
				executeConfig()

			case CONT:
				executeCont()

			case DELETE:
				executeDelete(tp[0])

			case DENORM:
				executeDenorm()

			case EDIT:
				executeEdit()

			case HELP:
				if len(tp) == 0 {
					executeHelp(nil)
				} else {
					executeHelp(tp[0])
				}

			case KILL:
				executeKill(tp)

			case LET:
				executeLet(createExecutionState(sp))

			case LIST:
				if len(tp) == 0 {
					executeList(nil, false)
				} else {
					executeList(tp[0], false)
				}

			case LISTNH:
				if len(tp) == 0 {
					executeList(nil, true)
				} else {
					executeList(tp[0], true)
				}

			case MAT:
				executeMat(tp)

			case NEW:
				executeNew(tp[0])

			case OLD:
				runtimeCheck(tp[0] != nil, "Filename required")
				executeOld(tp[0].tokenData.(string))

			case PRINT:
				executePrint(tp)

			case RELOAD:
				executeReload()

			case RENUMBER:
				executeRenumber(tp[0])

			case RUN:
				executeRun(nil, false)

			case RUNNH:
				executeRun(nil, true)

			case SAVE:
				executeSave(tp[0])

			case STATS:
				executeStats()

			case TRACE:
				executeTrace(tp[0])
			}

			return 0
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:388
		{
			head := yyDollar[2].snodeVal

			for sp := head; sp != nil; sp = sp.next {
				if head.next != nil {
					if sp.token == DEF || sp.token == DIM ||
						sp.token == FNEND || sp.token == REM ||
						sp.token == STOP {
						errorLoc("Invalid use of multiple statements!")
					}
				}
			}

			//
			// Ensure we're not adding a statement after an existing
			// END statement
			//

			if g.endStmtNo != 0 && deferredStmtNo > g.endStmtNo {
				errorLoc("Statement must precede END statement")
			}

			head.stmtNoTokenLoc.pos.column = 1
			head.stmtNoTokenLoc.end.column = head.tokenLoc.pos.column - 2

			insertStmtNode(head, deferredStmtNo)

			//
			// The manual states that no statements following the
			// END statement are returned to the parser.
			// Close the file, ensuring that the lexer will read any
			// further tokens from the keyboard.  Due to the preceding
			// check, any numbered lines will be disallowed anyway!
			//

			if g.endStmtNo != 0 {
				closeProgramFile()
			}

			return 0
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:431
		{
			return 1
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:437
		{
			sp1 := yyDollar[1].snodeVal
			spn := yyDollar[3].snodeVal

			if deferredStmtNo == 0 {
				errorLoc("Multiple statements not allowed in immediate mode")
			}

			sp1.next = spn
			sp1.tokenLoc = yyDollar[1].symLoc
			yyVAL.snodeVal = sp1
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:451
		{
			sp := yyDollar[1].snodeVal
			sp.tokenLoc = yyDollar[1].symLoc

			yyVAL.snodeVal = sp
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:460
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:465
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:471
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:476
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:482
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:487
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:493
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:498
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:504
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:509
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:515
		{
			tp1 := yyDollar[1].tnodeVal
			tp1.next = yyDollar[3].tnodeVal
			yyVAL.tnodeVal = tp1
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:522
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:528
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:533
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:538
		{
			errorLoc("Invalid variable!", &yyDollar[1].symLoc)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:544
		{
			requireImmediateStatement(ASSERT, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(ASSERT)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:551
		{
			requireImmediateStatement(BYE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(BYE)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:558
		{
			requireDeferredStatement(CHANGE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(CHANGE, yyDollar[2].tnodeVal, yyDollar[4].tnodeVal)
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:565
		{
			requireDeferredStatement(CHANGE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(CHANGE, yyDollar[2].tnodeVal, yyDollar[4].tnodeVal)
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:572
		{
			requireDeferredStatement(CHANGE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(CHANGE, yyDollar[2].tnodeVal, yyDollar[4].tnodeVal)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:579
		{
			requireDeferredStatement(COMMENT, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(COMMENT)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:587
		{
			yyVAL.snodeVal = yyDollar[1].snodeVal
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:592
		{
			requireImmediateStatement(CONT, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(CONT)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:599
		{
			requireImmediateStatement(CONFIG, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(CONFIG)
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:606
		{
			tp2 := yyDollar[2].tnodeVal

			requireDeferredStatement(DATA, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(DATA, tp2)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:615
		{
			tp2 := yyDollar[2].tnodeVal
			tp3 := createTokenNodeSlice(yyDollar[3].tnodeVal)
			tpx := make([]*tokenNode, 0)

			requireDeferredStatement(DEF, &yyDollar[1].symLoc)

			if len(tp3) > maxDefArgs {
				errorLoc("Too many function parameters", &yyDollar[3].symLoc)
			}

			tpx = append(tpx, tp2)
			tpx = append(tpx, nil)

			for ix := 0; ix < len(tp3); ix++ {
				tpx = append(tpx, tp3[ix])
			}

			yyVAL.snodeVal = makeStmtNode(DEF, tpx...)
		}
	case 35:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:637
		{
			requireDeferredStatement(DEF, &yyDollar[1].symLoc)

			tp2 := yyDollar[2].tnodeVal
			tp3 := createTokenNodeSlice(yyDollar[3].tnodeVal)
			tp5 := yyDollar[5].tnodeVal
			tpx := make([]*tokenNode, 0)

			if len(tp3) > maxDefArgs {
				errorLoc("Too many function parameters", &yyDollar[3].symLoc)
			}

			if isNumeric(tp2) {
				requireNumericOperand(tp5, &yyDollar[5].symLoc)
			} else {
				requireStringOperand(tp5, &yyDollar[5].symLoc)
			}

			if tp3 != nil {
				checkDefExpr(tp3, tp5)
			}

			tpx = append(tpx, tp2)
			tpx = append(tpx, tp5)

			for ix := 0; ix < len(tp3); ix++ {
				tpx = append(tpx, tp3[ix])
			}

			yyVAL.snodeVal = makeStmtNode(DEF, tpx...)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:670
		{
			requireImmediateStatement(DELETE, &yyDollar[1].symLoc)

			errorLoc("Missing statement number(s)", &yyDollar[1].symLoc)
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:677
		{
			requireImmediateStatement(DELETE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(DELETE, yyDollar[2].tnodeVal)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:684
		{
			requireImmediateStatement(DENORM, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(DENORM)
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:691
		{
			requireDeferredStatement(DIM, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(DIM, yyDollar[2].tnodeVal)
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:698
		{
			requireImmediateStatement(EDIT, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(EDIT)
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:705
		{
			requireDeferredStatement(END, &yyDollar[1].symLoc)

			if g.endStmtNo == 0 {
				lastStmt := stmtAvlTreeLastInOrder()
				if lastStmt != nil && lastStmt.stmtNo > deferredStmtNo {
					errorLoc("END statement must be last")
				}
			} else if g.endStmtNo != deferredStmtNo {
				errorLoc("Multiple END statements not allowed")
			}

			yyVAL.snodeVal = makeStmtNode(END)
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:721
		{
			requireDeferredStatement(FIELD, &yyDollar[1].symLoc)

			tp3 := yyDollar[3].tnodeVal

			requireNumericOperand(tp3, &yyDollar[3].symLoc)

			yyVAL.snodeVal = makeStmtNode(FIELD, tp3, yyDollar[5].tnodeVal)
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:732
		{
			tp2 := yyDollar[2].tnodeVal
			tp4 := yyDollar[4].tnodeVal
			tp6 := yyDollar[6].tnodeVal

			rpn2 := makeNrpnTokenNode(tp2)
			rpn4 := makeNrpnTokenNode(tp4)
			rpn6 := makeNrpnTokenNode(tp6)

			requireDeferredStatement(FOR, &yyDollar[1].symLoc)
			requireNumericOperand(rpn4, &yyDollar[4].symLoc)
			requireNumericOperand(rpn6, &yyDollar[6].symLoc)
			requireCompatibleNumericOperands(tp2, tp4, &yyDollar[4].symLoc, tp6, &yyDollar[6].symLoc)

			yyVAL.snodeVal = makeStmtNode(FOR, rpn2, rpn4, rpn6)
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:750
		{
			tp2 := yyDollar[2].tnodeVal
			tp4 := yyDollar[4].tnodeVal
			tp6 := yyDollar[6].tnodeVal
			tp8 := yyDollar[8].tnodeVal

			rpn2 := makeNrpnTokenNode(tp2)
			rpn4 := makeNrpnTokenNode(tp4)
			rpn6 := makeNrpnTokenNode(tp6)
			rpn8 := makeNrpnTokenNode(tp8)

			requireDeferredStatement(FOR, &yyDollar[1].symLoc)
			requireNumericOperand(rpn4, &yyDollar[4].symLoc)
			requireNumericOperand(rpn6, &yyDollar[6].symLoc)
			requireNumericOperand(rpn8, &yyDollar[8].symLoc)

			requireCompatibleNumericOperands(tp2, tp4, &yyDollar[4].symLoc, tp6,
				&yyDollar[6].symLoc, tp8, &yyDollar[8].symLoc)

			yyVAL.snodeVal = makeStmtNode(FOR, rpn2, rpn4, rpn6, rpn8)
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:773
		{
			tp2 := yyDollar[2].tnodeVal
			tp4 := yyDollar[4].tnodeVal
			tp5 := yyDollar[5].tnodeVal

			rpn2 := makeNrpnTokenNode(tp2)
			rpn4 := yyDollar[4].tnodeVal
			rpn5 := makeNrpnTokenNode(tp5)

			requireDeferredStatement(FOR, &yyDollar[1].symLoc)
			requireNumericOperand(rpn4, &yyDollar[4].symLoc)
			requireCompatibleNumericOperands(tp2, tp4, &yyDollar[4].symLoc)

			yyVAL.snodeVal = makeStmtNode(FOR, rpn2, rpn4, rpn5)
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:791
		{
			tp2 := yyDollar[2].tnodeVal
			tp4 := yyDollar[4].tnodeVal
			tp6 := yyDollar[6].tnodeVal
			tp7 := yyDollar[7].tnodeVal

			rpn2 := makeNrpnTokenNode(tp2)
			rpn4 := makeNrpnTokenNode(tp4)
			rpn6 := makeNrpnTokenNode(tp6)
			rpn7 := makeNrpnTokenNode(tp7)

			requireDeferredStatement(FOR, &yyDollar[1].symLoc)
			requireNumericOperand(rpn4, &yyDollar[4].symLoc)
			requireNumericOperand(rpn6, &yyDollar[6].symLoc)
			requireCompatibleNumericOperands(tp2, tp4, &yyDollar[4].symLoc, tp6, &yyDollar[6].symLoc)

			//
			// The following is NOT a typo.  To simplify the code
			// in executeFor, we ensure that the STEP expression,
			// if present, is always the last operand
			//

			yyVAL.snodeVal = makeStmtNode(FOR, rpn2, rpn4, rpn7, rpn6)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:817
		{
			yyVAL.snodeVal = makeStmtNode(FNEND)
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:822
		{
			yyVAL.snodeVal = makeStmtNode(GET, yyDollar[3].tnodeVal, yyDollar[4].tnodeVal)
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:827
		{
			requireDeferredStatement(GOSUB, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(GOSUB, yyDollar[2].tnodeVal)
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:834
		{
			requireDeferredStatement(GOTO, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(GOTO, yyDollar[2].tnodeVal)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:841
		{
			requireImmediateStatement(HELP, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(HELP)
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:848
		{
			requireImmediateStatement(HELP, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(HELP, yyDollar[2].tnodeVal)
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:855
		{
			requireDeferredStatement(IF, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(IF, yyDollar[2].tnodeVal, yyDollar[4].tnodeVal)
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:862
		{
			requireDeferredStatement(IF, &yyDollar[1].symLoc)

			sp := makeStmtNode(GOTO, yyDollar[4].tnodeVal)
			tp := makeTokenNode(STMT, sp)
			yyVAL.snodeVal = makeStmtNode(IF, yyDollar[2].tnodeVal, tp)
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:871
		{
			requireDeferredStatement(IF, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(IF, yyDollar[2].tnodeVal, yyDollar[4].tnodeVal,
				yyDollar[6].tnodeVal)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:879
		{
			requireDeferredStatement(INPUT, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(INPUT, nil, nil, yyDollar[2].tnodeVal)
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:886
		{
			requireDeferredStatement(INPUT, &yyDollar[1].symLoc)

			tp2 := yyDollar[2].tnodeVal

			requireNumericOperand(yyDollar[2].tnodeVal, &yyDollar[2].symLoc)

			yyVAL.snodeVal = makeStmtNode(INPUT, nil, tp2, yyDollar[4].tnodeVal)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:897
		{
			requireDeferredStatement(INPUT, &yyDollar[1].symLoc)

			tp3 := yyDollar[3].tnodeVal
			ilp := makeTokenNode(LINE)

			requireStringOperand(tp3, &yyDollar[3].symLoc)

			yyVAL.snodeVal = makeStmtNode(INPUT, ilp, nil, tp3)
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:909
		{
			requireDeferredStatement(INPUT, &yyDollar[1].symLoc)

			tp4 := yyDollar[4].tnodeVal
			ilp := makeTokenNode(LINE)
			tp6 := yyDollar[6].tnodeVal

			requireNumericOperand(tp4, &yyDollar[4].symLoc)
			requireStringOperand(tp6, &yyDollar[6].symLoc)

			yyVAL.snodeVal = makeStmtNode(INPUT, ilp, tp4, tp6)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:923
		{
			yyVAL.snodeVal = yyDollar[1].snodeVal
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:928
		{
			requireDeferredStatement(LSET, &yyDollar[1].symLoc)

			tp4 := yyDollar[4].tnodeVal

			requireStringOperand(tp4, &yyDollar[4].symLoc)

			yyVAL.snodeVal = makeStmtNode(LSET, yyDollar[2].tnodeVal, tp4)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:939
		{
			requireImmediateStatement(LIST, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(LIST)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:946
		{
			requireImmediateStatement(LISTNH, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(LISTNH)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:953
		{
			requireImmediateStatement(LIST, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(LIST, yyDollar[2].tnodeVal)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:960
		{
			requireImmediateStatement(LISTNH, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(LISTNH, yyDollar[2].tnodeVal)
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:967
		{
			yyVAL.snodeVal = makeStmtNode(MAT, yyDollar[2].tnodeVal)
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:972
		{
			requireImmediateStatement(NEW, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(NEW, yyDollar[2].tnodeVal)
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:979
		{
			requireDeferredStatement(NEXT, &yyDollar[1].symLoc)

			rpn := makeNrpnTokenNode(yyDollar[2].tnodeVal)
			yyVAL.snodeVal = makeStmtNode(NEXT, rpn)
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:987
		{
			requireImmediateStatement(OLD, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(OLD, yyDollar[2].tnodeVal)
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:994
		{
			requireDeferredStatement(ON, &yyDollar[1].symLoc)

			stmtList := make([]*tokenNode, 1)
			stmtList[0] = yyDollar[2].tnodeVal
			stmtList = append(stmtList, createTokenNodeSlice(yyDollar[4].tnodeVal)...)
			yyVAL.snodeVal = makeStmtNode(ONGOSUB, stmtList...)
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1004
		{
			requireDeferredStatement(ON, &yyDollar[1].symLoc)

			stmtList := make([]*tokenNode, 1)
			stmtList[0] = yyDollar[2].tnodeVal
			stmtList = append(stmtList, createTokenNodeSlice(yyDollar[4].tnodeVal)...)
			yyVAL.snodeVal = makeStmtNode(ONGOTO, stmtList...)
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1014
		{
			requireDeferredStatement(ON, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(ONERROR, yyDollar[4].tnodeVal)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1021
		{
			requireDeferredStatement(ON, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(ONERROR)
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1028
		{
			yyVAL.snodeVal = yyDollar[1].snodeVal
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1033
		{
			yyVAL.snodeVal = yyDollar[1].snodeVal
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1038
		{
			yyVAL.snodeVal = makeStmtNode(PUT, yyDollar[3].tnodeVal, yyDollar[4].tnodeVal)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1043
		{
			requireDeferredStatement(RANDOMIZE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(RANDOMIZE)
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1050
		{
			requireDeferredStatement(READ, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(READ, yyDollar[2].tnodeVal)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1057
		{
			requireDeferredStatement(REM, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(REM)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1064
		{
			requireImmediateStatement(RELOAD, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(RELOAD)
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1071
		{
			requireImmediateStatement(RENUMBER, &yyDollar[1].symLoc)

			errorLoc("Missing statement number", &yyDollar[1].symLoc)
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1078
		{
			requireImmediateStatement(RENUMBER, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(RENUMBER, yyDollar[2].tnodeVal)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1085
		{
			requireDeferredStatement(RESTORE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(RESTORE)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1092
		{
			requireDeferredStatement(RESTORE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(RESUME)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1099
		{
			requireDeferredStatement(RESTORE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(RESUME, yyDollar[2].tnodeVal)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1106
		{
			requireDeferredStatement(RETURN, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(RETURN)
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1113
		{
			requireDeferredStatement(RSET, &yyDollar[1].symLoc)

			tp4 := yyDollar[4].tnodeVal

			requireStringOperand(tp4, &yyDollar[4].symLoc)

			yyVAL.snodeVal = makeStmtNode(RSET, yyDollar[2].tnodeVal, tp4)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1124
		{
			requireImmediateStatement(RUN, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(RUN)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1131
		{
			requireImmediateStatement(RUNNH, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(RUNNH)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1138
		{
			requireImmediateStatement(SAVE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(SAVE, yyDollar[2].tnodeVal)
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1145
		{
			requireDeferredStatement(SLEEP, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(SLEEP, yyDollar[2].tnodeVal)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1152
		{
			requireImmediateStatement(STATS, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(STATS)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1159
		{
			requireDeferredStatement(STOP, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(STOP)
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1166
		{
			requireImmediateStatement(TRACE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(TRACE, yyDollar[2].tnodeVal)
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1173
		{
			requireDeferredStatement(WAIT, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(WAIT, yyDollar[2].tnodeVal)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1180
		{
			yyVAL.snodeVal = yyDollar[1].snodeVal
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1186
		{
			yyVAL.tnodeVal = makeTokenNode(EQ, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1191
		{
			yyVAL.tnodeVal = makeTokenNode(EQ, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1196
		{
			yyVAL.tnodeVal = makeTokenNode(EQ, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1201
		{
			yyVAL.tnodeVal = makeTokenNode(PRINT, yyDollar[2].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1206
		{
			yyVAL.tnodeVal = makeTokenNode(INPUT, yyDollar[2].tnodeVal)
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1211
		{
			yyVAL.tnodeVal = makeTokenNode(READ, yyDollar[2].tnodeVal)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1217
		{
			yyVAL.tnodeVal = makeTokenNode(PLUS, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1222
		{
			yyVAL.tnodeVal = makeTokenNode(MINUS, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1227
		{
			yyVAL.tnodeVal = makeTokenNode(STAR, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1232
		{
			yyVAL.tnodeVal = makeTokenNode(STAR, yyDollar[2].tnodeVal, yyDollar[5].tnodeVal)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1238
		{
			yyVAL.tnodeVal = makeTokenNode(CON)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1243
		{
			yyVAL.tnodeVal = makeTokenNode(IDN)
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1248
		{
			yyVAL.tnodeVal = makeTokenNode(INV, yyDollar[3].tnodeVal)
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1253
		{
			yyVAL.tnodeVal = makeTokenNode(TRN, yyDollar[3].tnodeVal)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1258
		{
			yyVAL.tnodeVal = makeTokenNode(ZER)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1264
		{
			tp1 := makeSrpnTokenNode(yyDollar[1].tnodeVal)
			tp3 := yyDollar[3].tnodeVal

			tp1.next = tp3
			yyVAL.tnodeVal = tp1
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1273
		{
			yyVAL.tnodeVal = makeSrpnTokenNode(yyDollar[1].tnodeVal)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1279
		{
			tp1 := yyDollar[1].tnodeVal
			tp3 := yyDollar[3].tnodeVal

			tp1.next = tp3
			yyVAL.tnodeVal = tp1
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1288
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1294
		{
			tp1 := yyDollar[1].tnodeVal

			requireNumericOperand(tp1, &yyDollar[1].symLoc)

			tp3 := makeSrpnTokenNode(yyDollar[3].tnodeVal)

			yyVAL.tnodeVal = makeTokenNode(FIELDELEMENT, tp1, tp3)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1306
		{
			tp3 := yyDollar[3].tnodeVal

			requireNumericOperand(tp3, &yyDollar[3].symLoc)

			yyVAL.tnodeVal = makeTokenNode(RECORD, tp3)
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1315
		{
			yyVAL.tnodeVal = nil
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1321
		{
			tp3 := yyDollar[3].tnodeVal

			requireNumericOperand(tp3, &yyDollar[3].symLoc)

			yyVAL.tnodeVal = makeTokenNode(RECORD, tp3)
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1330
		{
			yyVAL.tnodeVal = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1345
		{
			tp2 := yyDollar[2].tnodeVal

			requireDeferredStatement(CLOSE, &yyDollar[1].symLoc)

			yyVAL.snodeVal = makeStmtNode(CLOSE, createTokenNodeSlice(tp2)...)
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1355
		{
			tp2 := yyDollar[2].tnodeVal

			requireStringOperand(tp2, &yyDollar[2].symLoc)

			yyVAL.snodeVal = makeStmtNode(KILL, tp2)
		}
	case 125:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1365
		{
			tp2 := yyDollar[2].tnodeVal
			tp3 := yyDollar[3].tnodeVal
			tp6 := yyDollar[6].tnodeVal

			requireDeferredStatement(OPEN, &yyDollar[1].symLoc)
			requireStringOperand(tp2, &yyDollar[2].symLoc)
			requireNumericOperand(tp6, &yyDollar[6].symLoc)

			yyVAL.snodeVal = makeStmtNode(OPEN, tp2, tp3, tp6)
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1379
		{
			yyVAL.tnodeVal = yyDollar[2].tnodeVal
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1384
		{
			yyVAL.tnodeVal = makeTokenNode(INTEGER, int16(IOREAD|IOWRITE))
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1390
		{
			yyVAL.tnodeVal = makeTokenNode(INTEGER, int16(IOREAD))
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1395
		{
			yyVAL.tnodeVal = makeTokenNode(INTEGER, int16(IOWRITE))
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1418
		{
			yyVAL.tnodeVal = makeTokenNode(BYE)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1423
		{
			yyVAL.tnodeVal = makeTokenNode(CONFIG)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1428
		{
			yyVAL.tnodeVal = makeTokenNode(CONT)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1433
		{
			yyVAL.tnodeVal = makeTokenNode(DELETE)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1438
		{
			yyVAL.tnodeVal = makeTokenNode(DENORM)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1443
		{
			yyVAL.tnodeVal = makeTokenNode(EDIT)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1448
		{
			yyVAL.tnodeVal = makeTokenNode(KILL)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1453
		{
			yyVAL.tnodeVal = makeTokenNode(LIST)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1458
		{
			yyVAL.tnodeVal = makeTokenNode(LISTNH)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1463
		{
			yyVAL.tnodeVal = makeTokenNode(NEW)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1468
		{
			yyVAL.tnodeVal = makeTokenNode(OLD)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1473
		{
			yyVAL.tnodeVal = makeTokenNode(RELOAD)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1478
		{
			yyVAL.tnodeVal = makeTokenNode(RUN)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1483
		{
			yyVAL.tnodeVal = makeTokenNode(RUNNH)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1488
		{
			yyVAL.tnodeVal = makeTokenNode(SAVE)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1493
		{
			yyVAL.tnodeVal = makeTokenNode(STATS)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1498
		{
			yyVAL.tnodeVal = makeTokenNode(TRACE)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1504
		{
			tp1 := yyDollar[1].tnodeVal

			tp1.next = yyDollar[2].tnodeVal

			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1513
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1519
		{
			yyVAL.tnodeVal = makeTokenNode(DUMP)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1524
		{
			yyVAL.tnodeVal = makeTokenNode(EXEC)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1529
		{
			yyVAL.tnodeVal = makeTokenNode(VARS)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1534
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1557
		{
			yyVAL.tnodeVal = makeTokenNode(FNFVAR, yyDollar[1].stringVal)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1562
		{
			yyVAL.tnodeVal = makeTokenNode(FNIVAR, yyDollar[1].stringVal)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1567
		{
			yyVAL.tnodeVal = makeTokenNode(FNSVAR, yyDollar[1].stringVal)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1572
		{
			errorLoc("Invalid function name", &yyDollar[1].symLoc)
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1578
		{
			yyVAL.tnodeVal = nil
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1583
		{
			yyVAL.tnodeVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1588
		{
			yyVAL.tnodeVal = yyDollar[2].tnodeVal
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1594
		{
			tp1 := yyDollar[1].tnodeVal
			yyVAL.tnodeVal = tp1
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1600
		{
			tp1 := yyDollar[1].tnodeVal

			tp1.next = yyDollar[3].tnodeVal
			yyVAL.tnodeVal = tp1
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1609
		{
			yyVAL.tnodeVal = nil
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1614
		{
			yyVAL.tnodeVal = nil
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1619
		{
			yyVAL.tnodeVal = yyDollar[2].tnodeVal
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1625
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1630
		{
			tp1 := yyDollar[1].tnodeVal

			tp1.next = yyDollar[3].tnodeVal
			yyVAL.tnodeVal = tp1
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1639
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1644
		{
			errorLoc("Invalid function parameter", &yyDollar[1].symLoc)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1650
		{
			yyVAL.snodeVal = makeStmtNode(PRINT, nil, nil, nil)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1655
		{
			t2 := yyDollar[2].tnodeVal

			for t := t2; t != nil; t = t.next {
				if t.next == nil {
					t.next = yyDollar[3].tnodeVal
					break
				}
			}

			yyVAL.snodeVal = makeStmtNode(PRINT, nil, nil, t2)
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1669
		{
			t3 := yyDollar[3].tnodeVal

			requireStringOperand(t3, &yyDollar[3].symLoc)

			yyVAL.snodeVal = makeStmtNode(PRINT, nil, t3, yyDollar[5].tnodeVal)
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1679
		{
			//
			// Formatting and zones are not relevant when doing
			// PRINT to a file, but the BNF requires us to accept
			// COMMA, etc.  After parsing the entire command, we
			// change anything other than NRPN or SRPN to SEMI,
			// which is ignored by basicPrint.  Since we are writing
			// to a file, ignoring any trailing COMMA or SEMI
			//

			t2 := yyDollar[2].tnodeVal
			t4 := yyDollar[4].tnodeVal

			for t := t4; t != nil; t = t.next {
				if t.token != NRPN && t.token != SRPN {
					t.token = SEMI
				}
			}

			requireNumericOperand(t2, &yyDollar[2].symLoc)

			yyVAL.snodeVal = makeStmtNode(PRINT, t2, nil, t4)
		}
	case 179:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1704
		{
			//
			// Formatting and zones are not relevant when doing
			// PRINT to a file, but the BNF requires us to accept
			// COMMA, etc.  After parsing the entire command, we
			// change anything other than NRPN or SRPN to SEMI,
			// to a file, ignoring any trailing COMMA or SEMI
			// which is ignored by basicPrint
			//

			t2 := yyDollar[2].tnodeVal
			t4 := yyDollar[4].tnodeVal
			t6 := yyDollar[6].tnodeVal

			for t := t6; t != nil; t = t.next {
				if t.token != NRPN && t.token != SRPN {
					t.token = SEMI
				}
			}

			requireNumericOperand(t2, &yyDollar[2].symLoc)
			requireStringOperand(t4, &yyDollar[4].symLoc)

			yyVAL.snodeVal = makeStmtNode(PRINT, t2, t4, t6)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1744
		{
			yyVAL.tnodeVal = makeTokenNode(FILENAME, yyDollar[1].stringVal)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1749
		{
			errorLoc("Invalid filename!")
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1753
		{
			yyVAL.tnodeVal = nil
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1759
		{
			tp1 := yyDollar[1].tnodeVal
			tp1.next = yyDollar[3].tnodeVal
			yyVAL.tnodeVal = tp1
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1766
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1772
		{
			tp1 := yyDollar[1].tnodeVal

			requireNumericOperand(tp1, &yyDollar[1].symLoc)

			yyVAL.tnodeVal = tp1
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1782
		{
			tp1 := yyDollar[1].tnodeVal
			tp1.next = yyDollar[3].tnodeVal
			yyVAL.tnodeVal = tp1
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1789
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1795
		{
			yyVAL.tnodeVal = makeTokenNode(WHILE, yyDollar[2].tnodeVal)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1800
		{
			yyVAL.tnodeVal = makeTokenNode(UNTIL, yyDollar[2].tnodeVal)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1820
		{
			yyVAL.tnodeVal = makeTokenNode(STMT, yyDollar[1].snodeVal)
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1825
		{
			sp := makeStmtNode(GOSUB, yyDollar[2].tnodeVal)
			yyVAL.tnodeVal = makeTokenNode(STMT, sp)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1831
		{
			sp := makeStmtNode(GOTO, yyDollar[2].tnodeVal)
			yyVAL.tnodeVal = makeTokenNode(STMT, sp)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1837
		{
			yyVAL.tnodeVal = makeTokenNode(STMT, yyDollar[1].snodeVal)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1842
		{
			yyVAL.tnodeVal = makeTokenNode(STMT, yyDollar[1].snodeVal)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1847
		{
			yyVAL.tnodeVal = makeTokenNode(STMT, yyDollar[1].snodeVal)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1852
		{
			sp := makeStmtNode(RANDOMIZE)
			yyVAL.tnodeVal = makeTokenNode(STMT, sp)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1858
		{
			sp := makeStmtNode(RESTORE)
			yyVAL.tnodeVal = makeTokenNode(STMT, sp)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1864
		{
			sp := makeStmtNode(RESUME)
			yyVAL.tnodeVal = makeTokenNode(STMT, sp)
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1870
		{
			sp := makeStmtNode(RESUME, yyDollar[2].tnodeVal)
			yyVAL.tnodeVal = makeTokenNode(STMT, sp)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1876
		{
			sp := makeStmtNode(RANDOMIZE)
			yyVAL.tnodeVal = makeTokenNode(STMT, sp)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1882
		{
			sp := makeStmtNode(STOP)
			yyVAL.tnodeVal = makeTokenNode(STMT, sp)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1888
		{
			yyVAL.tnodeVal = makeTokenNode(STMT, yyDollar[1].snodeVal)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1893
		{
			sp := makeStmtNode(GOTO, yyDollar[1].tnodeVal)
			yyVAL.tnodeVal = makeTokenNode(STMT, sp)
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1900
		{
			requireNumericOperand(yyDollar[4].tnodeVal, &yyDollar[4].symLoc)

			lhs := makeNrpnTokenNode(yyDollar[2].tnodeVal)

			yyVAL.snodeVal = makeStmtNode(LET, lhs, yyDollar[4].tnodeVal)
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1909
		{
			requireNumericOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)

			lhs := makeNrpnTokenNode(yyDollar[1].tnodeVal)

			yyVAL.snodeVal = makeStmtNode(LET, lhs, yyDollar[3].tnodeVal)
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1918
		{
			requireStringOperand(yyDollar[4].tnodeVal, &yyDollar[4].symLoc)

			lhs := makeSrpnTokenNode(yyDollar[2].tnodeVal)

			yyVAL.snodeVal = makeStmtNode(LET, lhs, yyDollar[4].tnodeVal)
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1927
		{
			requireStringOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)

			lhs := makeSrpnTokenNode(yyDollar[1].tnodeVal)

			yyVAL.snodeVal = makeStmtNode(LET, lhs, yyDollar[3].tnodeVal)
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1936
		{
			if isNumeric(yyDollar[2].tnodeVal) {
				requireNumericOperand(yyDollar[4].tnodeVal, &yyDollar[4].symLoc)
			} else {
				requireStringOperand(yyDollar[4].tnodeVal, &yyDollar[4].symLoc)
			}

			lhs := makeNrpnTokenNode(yyDollar[2].tnodeVal)

			yyVAL.snodeVal = makeStmtNode(LET, lhs, yyDollar[4].tnodeVal)
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1949
		{
			if isNumeric(yyDollar[1].tnodeVal) {
				requireNumericOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)
			} else {
				requireStringOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)
			}

			lhs := makeNrpnTokenNode(yyDollar[1].tnodeVal)

			yyVAL.snodeVal = makeStmtNode(LET, lhs, yyDollar[3].tnodeVal)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1963
		{
			yyDollar[1].tnodeVal.next = yyDollar[3].tnodeVal
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1969
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1975
		{
			firstStmt := yyDollar[1].tnodeVal.tokenData.(int16)
			lastStmt := yyDollar[3].tnodeVal.tokenData.(int16)

			if firstStmt > lastStmt {
				errorLoc("Invalid statement number range", &yyDollar[1].symLoc)
			}

			yyVAL.tnodeVal = makeTokenNode(INTPAIR, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1988
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1994
		{
			tp1 := yyDollar[1].tnodeVal
			tp2 := yyDollar[3].tnodeVal
			tp1.next = tp2

			yyVAL.tnodeVal = tp1
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2003
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2009
		{
			tp1 := yyDollar[1].tnodeVal
			tp1.operands = append(tp1.operands, yyDollar[3].tnodeVal)

			yyVAL.tnodeVal = tp1
		}
	case 217:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2017
		{
			tp1 := yyDollar[1].tnodeVal
			tp1.operands = append(tp1.operands, yyDollar[3].tnodeVal)
			tp1.operands = append(tp1.operands, yyDollar[5].tnodeVal)

			yyVAL.tnodeVal = tp1
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2026
		{
			tp1 := yyDollar[1].tnodeVal
			tp1.operands = append(tp1.operands, yyDollar[3].tnodeVal)

			yyVAL.tnodeVal = tp1
		}
	case 219:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2034
		{
			tp1 := yyDollar[1].tnodeVal
			tp1.operands = append(tp1.operands, yyDollar[3].tnodeVal)
			tp1.operands = append(tp1.operands, yyDollar[5].tnodeVal)

			yyVAL.tnodeVal = tp1
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2054
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2059
		{
			tp1 := yyDollar[1].tnodeVal

			tp1.next = yyDollar[3].tnodeVal
			yyVAL.tnodeVal = tp1
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2068
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2074
		{
			tp1 := yyDollar[1].tnodeVal
			tp3 := yyDollar[3].tnodeVal

			yyVAL.tnodeVal = makeTokenNode(INPUTPAIR, tp1, tp3)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2083
		{
			tp1 := yyDollar[1].tnodeVal
			tp1.next = yyDollar[3].tnodeVal

			yyVAL.tnodeVal = tp1
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2091
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2097
		{
			tp1 := yyDollar[1].tnodeVal
			tp1.next = yyDollar[3].tnodeVal

			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2105
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2111
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2116
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2121
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2126
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2132
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2137
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2154
		{
			tp1 := yyDollar[1].tnodeVal
			tp2 := yyDollar[2].tnodeVal
			tp3 := yyDollar[3].tnodeVal

			tp1.next = tp2
			tp2.next = tp3
			yyVAL.tnodeVal = tp1
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2165
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2171
		{
			yyVAL.tnodeVal = makeTokenNode(TRAILING_COMMA)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2176
		{
			yyVAL.tnodeVal = makeTokenNode(TRAILING_SEMI)
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2181
		{
			yyVAL.tnodeVal = nil
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2187
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2193
		{
			yyVAL.tnodeVal = makeTokenNode(DCOMMA)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2198
		{
			yyVAL.tnodeVal = makeTokenNode(COMMA)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2203
		{
			yyVAL.tnodeVal = makeTokenNode(SEMI)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2209
		{
			yyVAL.tnodeVal = makeTokenNode(STRING, yyDollar[1].stringVal)
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2214
		{
			errorLoc("Unterminated string", &yyDollar[1].symLoc)
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2220
		{
			yyVAL.tnodeVal = makeTokenNode(SUBSCR, yyDollar[1].tnodeVal, yyDollar[2].tnodeVal)
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2226
		{
			yyVAL.tnodeVal = makeTokenNode(FVAR, yyDollar[1].stringVal)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2232
		{
			yyVAL.tnodeVal = makeTokenNode(SUBSCR, yyDollar[1].tnodeVal, yyDollar[2].tnodeVal)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2238
		{
			yyVAL.tnodeVal = makeTokenNode(IVAR, yyDollar[1].stringVal)
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2244
		{
			yyVAL.tnodeVal = makeTokenNode(SUBSCR, yyDollar[1].tnodeVal, yyDollar[2].tnodeVal)
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2250
		{
			yyVAL.tnodeVal = makeTokenNode(SVAR, yyDollar[1].stringVal)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2265
		{
			i64 := yyDollar[1].int64Val

			checkInt16(ESUBSCRIPTERROR, i64, 1, &yyDollar[1].symLoc)

			yyVAL.tnodeVal = makeTokenNode(INTEGER, int16(i64))
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2275
		{
			i64 := yyDollar[1].int64Val

			checkInt16(EILLEGALLINENUMBER, i64, 0, &yyDollar[1].symLoc)

			tp := makeTokenNode(INTEGER, int16(i64))
			tp.tlocs = uint16(yyDollar[1].symLoc.pos.column) - 1
			tp.tloce = uint16(yyDollar[1].symLoc.end.column)
			yyVAL.tnodeVal = tp
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2288
		{
			i64 := yyDollar[1].int64Val

			checkInt16(EILLEGALLINENUMBER, i64, 1, &yyDollar[1].symLoc)

			tp := makeTokenNode(INTEGER, int16(i64))
			tp.tlocs = uint16(yyDollar[1].symLoc.pos.column) - 1
			tp.tloce = uint16(yyDollar[1].symLoc.end.column)
			yyVAL.tnodeVal = tp
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2301
		{
			//
			// Tricky: we are parsing an explicit integer, so we
			// need to take account of the asymmetry in signed
			// integers.  We negate the int64 token, and check
			// the magnitude, but don't actually negate the integer,
			// as that is done in the later arithmetic rule
			//

			i64 := yyDollar[1].int64Val

			if parsingUneg {
				i64 = -i64
			}

			checkInt16(EINTEGERERROR, i64, math.MinInt16, &yyDollar[1].symLoc)

			yyVAL.tnodeVal = makeTokenNode(INTEGER, int16(yyDollar[1].int64Val))
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2323
		{
			yyVAL.tnodeVal = makeTokenNode(FLOAT, float64(yyDollar[1].int64Val))
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2329
		{
			yyVAL.tnodeVal = makeTokenNode(FLOAT, yyDollar[1].float64Val)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2342
		{
			yyVAL.tnodeVal = createRpnExpr(yyDollar[1].tnodeVal)
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2356
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2361
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2366
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2371
		{
			tp1 := yyDollar[1].tnodeVal
			tp2 := createTokenNodeSlice(yyDollar[2].tnodeVal)
			tpx := make([]any, 0)

			if len(tp2) > maxDefArgs {
				errorLoc("Too many function arguments", &yyDollar[2].symLoc)
			}

			//
			// To make life easier on the RPN processor, we push the
			// function token last, so it can tell how many values to
			// copy off the stack (it needs to match number and type of
			// arguments with formal parameters).  We also need to have
			// the number of arguments on the stack next to the function
			// token
			//

			for ix := 0; ix < len(tp2); ix++ {
				tpx = append(tpx, tp2[ix])
			}

			tpx = append(tpx, makeTokenNode(INTEGER, int16(len(tp2))))
			tpx = append(tpx, tp1)

			if isNumeric(tp1) {
				yyVAL.tnodeVal = makeTokenNode(NCALL, tpx...)
			} else {
				yyVAL.tnodeVal = makeTokenNode(SCALL, tpx...)
			}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2404
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2409
		{
			token := requireCompatibleOperands(PLUS, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)

			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2417
		{
			requireNumericOperand(yyDollar[1].tnodeVal, &yyDollar[1].symLoc)
			requireNumericOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)

			yyVAL.tnodeVal = makeTokenNode(MINUS, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2425
		{
			requireNumericOperand(yyDollar[1].tnodeVal, &yyDollar[1].symLoc)
			requireNumericOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)

			yyVAL.tnodeVal = makeTokenNode(STAR, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2433
		{
			requireNumericOperand(yyDollar[1].tnodeVal, &yyDollar[1].symLoc)
			requireNumericOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)

			yyVAL.tnodeVal = makeTokenNode(SLASH, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2441
		{
			requireNumericOperand(yyDollar[1].tnodeVal, &yyDollar[1].symLoc)
			requireNumericOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)

			yyVAL.tnodeVal = makeTokenNode(POW, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2448
		{
			parsingUneg = true
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2449
		{
			requireNumericOperand(yyDollar[3].tnodeVal, &yyDollar[2].symLoc)

			yyVAL.tnodeVal = makeTokenNode(UNEG, yyDollar[3].tnodeVal)

			parsingUneg = false
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2458
		{
			requireNumericOperand(yyDollar[2].tnodeVal, &yyDollar[2].symLoc)

			yyVAL.tnodeVal = yyDollar[2].tnodeVal
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2465
		{

			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2471
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2476
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2481
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2486
		{
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2492
		{
			yyVAL.tnodeVal = makeTokenNode(ABS, yyDollar[2].tnodeVal)
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2497
		{
			yyVAL.tnodeVal = makeTokenNode(ASCII, yyDollar[2].tnodeVal)
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2502
		{
			yyVAL.tnodeVal = makeTokenNode(ATN, yyDollar[2].tnodeVal)
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2507
		{
			yyVAL.tnodeVal = makeTokenNode(CHRS, yyDollar[2].tnodeVal)
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2512
		{
			yyVAL.tnodeVal = makeTokenNode(COS, yyDollar[2].tnodeVal)
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2517
		{
			yyVAL.tnodeVal = makeTokenNode(CVTFS, yyDollar[2].tnodeVal)
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2522
		{
			yyVAL.tnodeVal = makeTokenNode(CVTIS, yyDollar[2].tnodeVal)
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2527
		{
			yyVAL.tnodeVal = makeTokenNode(CVTSF, yyDollar[2].tnodeVal)
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2532
		{
			yyVAL.tnodeVal = makeTokenNode(CVTSI, yyDollar[2].tnodeVal)
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2537
		{
			yyVAL.tnodeVal = makeTokenNode(DATES, yyDollar[2].tnodeVal)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2542
		{
			yyVAL.tnodeVal = makeTokenNode(DET)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2547
		{
			yyVAL.tnodeVal = makeTokenNode(ERL)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2552
		{
			yyVAL.tnodeVal = makeTokenNode(ERR)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2557
		{
			yyVAL.tnodeVal = makeTokenNode(EXP, yyDollar[2].tnodeVal)
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2562
		{
			yyVAL.tnodeVal = makeTokenNode(FIX, yyDollar[2].tnodeVal)
		}
	case 295:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2567
		{
			arg1 := yyDollar[3].tnodeVal
			arg2 := yyDollar[5].tnodeVal
			arg3 := yyDollar[7].tnodeVal

			requireNumericOperand(arg1, &yyDollar[3].symLoc)
			requireStringOperand(arg2, &yyDollar[5].symLoc)
			requireStringOperand(arg3, &yyDollar[7].symLoc)

			yyVAL.tnodeVal = makeTokenNode(INSTR, arg1, arg2, arg3)
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2580
		{
			yyVAL.tnodeVal = makeTokenNode(INT, yyDollar[2].tnodeVal)
		}
	case 297:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2585
		{
			arg1 := yyDollar[3].tnodeVal
			arg2 := yyDollar[5].tnodeVal

			requireStringOperand(arg1, &yyDollar[3].symLoc)
			requireNumericOperand(arg2, &yyDollar[5].symLoc)

			yyVAL.tnodeVal = makeTokenNode(LEFT, arg1, arg2)
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2596
		{
			yyVAL.tnodeVal = makeTokenNode(LEN, yyDollar[2].tnodeVal)
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2601
		{
			yyVAL.tnodeVal = makeTokenNode(LOG, yyDollar[2].tnodeVal)
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2606
		{
			yyVAL.tnodeVal = makeTokenNode(LOG10, yyDollar[2].tnodeVal)
		}
	case 301:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2611
		{
			arg1 := yyDollar[3].tnodeVal
			arg2 := yyDollar[5].tnodeVal
			arg3 := yyDollar[7].tnodeVal

			requireStringOperand(arg1, &yyDollar[3].symLoc)
			requireNumericOperand(arg2, &yyDollar[5].symLoc)
			requireNumericOperand(arg3, &yyDollar[7].symLoc)

			yyVAL.tnodeVal = makeTokenNode(MID, arg1, arg2, arg3)
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2624
		{
			yyVAL.tnodeVal = makeTokenNode(NUMS, yyDollar[2].tnodeVal)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2629
		{
			yyVAL.tnodeVal = makeTokenNode(PI)
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2634
		{
			yyVAL.tnodeVal = makeTokenNode(POS, yyDollar[2].tnodeVal)
		}
	case 305:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2639
		{
			arg1 := yyDollar[3].tnodeVal
			arg2 := yyDollar[5].tnodeVal

			requireStringOperand(arg1, &yyDollar[3].symLoc)
			requireNumericOperand(arg2, &yyDollar[5].symLoc)

			yyVAL.tnodeVal = makeTokenNode(RIGHT, arg1, arg2)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2650
		{
			yyVAL.tnodeVal = makeTokenNode(RND)
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2655
		{
			// ignore the argument!
			yyVAL.tnodeVal = makeTokenNode(RND)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2661
		{
			yyVAL.tnodeVal = makeTokenNode(SGN, yyDollar[2].tnodeVal)
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2666
		{
			yyVAL.tnodeVal = makeTokenNode(SIN, yyDollar[2].tnodeVal)
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2671
		{
			yyVAL.tnodeVal = makeTokenNode(SPACES, yyDollar[2].tnodeVal)
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2676
		{
			yyVAL.tnodeVal = makeTokenNode(SQR, yyDollar[2].tnodeVal)
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2681
		{
			yyVAL.tnodeVal = makeTokenNode(SWAPI, yyDollar[2].tnodeVal)
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2686
		{
			yyVAL.tnodeVal = makeTokenNode(TAB, yyDollar[2].tnodeVal)
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2691
		{
			yyVAL.tnodeVal = makeTokenNode(TAN, yyDollar[2].tnodeVal)
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2696
		{
			yyVAL.tnodeVal = makeTokenNode(TIME, yyDollar[2].tnodeVal)
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2701
		{
			yyVAL.tnodeVal = makeTokenNode(TIMES, yyDollar[2].tnodeVal)
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2706
		{
			yyVAL.tnodeVal = makeTokenNode(VAL, yyDollar[2].tnodeVal)
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2712
		{
			token := requireCompatibleOperands(APPROX, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2719
		{
			token := requireCompatibleOperands(EQ, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2726
		{
			token := requireCompatibleOperands(GE, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2733
		{
			token := requireCompatibleOperands(GT, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2740
		{
			token := requireCompatibleOperands(LE, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2747
		{
			token := requireCompatibleOperands(LT, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2754
		{
			token := requireCompatibleOperands(NE, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2761
		{
			requireIntegerOperand(yyDollar[2].tnodeVal, &yyDollar[2].symLoc)
			yyVAL.tnodeVal = makeTokenNode(NOT, yyDollar[2].tnodeVal)
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2768
		{
			requireIntegerOperand(yyDollar[1].tnodeVal, &yyDollar[1].symLoc)
			requireIntegerOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)
			token := requireCompatibleOperands(AND, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2777
		{
			requireIntegerOperand(yyDollar[1].tnodeVal, &yyDollar[1].symLoc)
			requireIntegerOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)
			token := requireCompatibleOperands(IMP, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2786
		{
			requireIntegerOperand(yyDollar[1].tnodeVal, &yyDollar[1].symLoc)
			requireIntegerOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)
			token := requireCompatibleOperands(EQV, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2795
		{
			requireIntegerOperand(yyDollar[1].tnodeVal, &yyDollar[1].symLoc)
			requireIntegerOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)
			token := requireCompatibleOperands(OR, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2804
		{
			requireIntegerOperand(yyDollar[1].tnodeVal, &yyDollar[1].symLoc)
			requireIntegerOperand(yyDollar[3].tnodeVal, &yyDollar[3].symLoc)
			token := requireCompatibleOperands(XOR, yyDollar[1].tnodeVal,
				yyDollar[3].tnodeVal, &yyDollar[1].symLoc, &yyDollar[3].symLoc)
			yyVAL.tnodeVal = makeTokenNode(token, yyDollar[1].tnodeVal, yyDollar[3].tnodeVal)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2814
		{
			requireNumericOperand(yyDollar[1].tnodeVal, &yyDollar[1].symLoc)
			yyVAL.tnodeVal = yyDollar[1].tnodeVal
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2821
		{
			yyVAL.tnodeVal = yyDollar[2].tnodeVal
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2827
		{
			requireStringOperand(yyDollar[2].tnodeVal, &yyDollar[2].symLoc)
			yyVAL.tnodeVal = yyDollar[2].tnodeVal
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2834
		{
			requireNumericOperand(yyDollar[2].tnodeVal, &yyDollar[2].symLoc)

			yyVAL.tnodeVal = yyDollar[2].tnodeVal
		}
	case 335:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2841
		{
			requireNumericOperand(yyDollar[2].tnodeVal, &yyDollar[2].symLoc)
			requireNumericOperand(yyDollar[4].tnodeVal, &yyDollar[4].symLoc)

			yyVAL.tnodeVal = makeTokenNode(INTPAIR, yyDollar[2].tnodeVal, yyDollar[4].tnodeVal)
		}
	}
	goto yystack /* stack new state and value */
}
